// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// FeeHandlerMetaData contains all meta data concerning the FeeHandler contract.
var FeeHandlerMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"test\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"receive\",\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"FIXED1_UINT\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MIN_BURN\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"activateToken\",\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"addToken\",\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"handlerAddress\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"burnCelo\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"burnFraction\",\"inputs\":[],\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"celoToBeBurned\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"dailySellLimitHit\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amountToBurn\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"deactivateToken\",\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"distribute\",\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"distributeAll\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"feeBeneficiary\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getActiveTokens\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getPastBurnForToken\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTokenActive\",\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTokenCurrentDaySellLimit\",\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTokenDailySellLimit\",\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTokenHandler\",\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTokenMaxSlippage\",\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTokenToDistribute\",\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getVersionNumber\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"handle\",\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"handleAll\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_registryAddress\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"newFeeBeneficiary\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"newBurnFraction\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"tokens\",\"type\":\"address[]\",\"internalType\":\"address[]\"},{\"name\":\"handlers\",\"type\":\"address[]\",\"internalType\":\"address[]\"},{\"name\":\"newLimits\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"},{\"name\":\"newMaxSlippages\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"initialized\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"lastLimitDay\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"registry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractICeloRegistry\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"removeToken\",\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"sell\",\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setBurnFraction\",\"inputs\":[{\"name\":\"fraction\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setDailySellLimit\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"newLimit\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setFeeBeneficiary\",\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setHandler\",\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"handlerAddress\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setMaxSplippage\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"newMax\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setRegistry\",\"inputs\":[{\"name\":\"registryAddress\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transfer\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"BurnFractionSet\",\"inputs\":[{\"name\":\"fraction\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"DailyLimitHit\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"burning\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"DailyLimitSet\",\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"newLimit\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"DailySellLimitUpdated\",\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"FeeBeneficiarySet\",\"inputs\":[{\"name\":\"newBeneficiary\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"MaxSlippageSet\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"maxSlippage\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RegistrySet\",\"inputs\":[{\"name\":\"registryAddress\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"SoldAndBurnedToken\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"TokenAdded\",\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"handlerAddress\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"TokenRemoved\",\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162003b0938038062003b098339810160408190526200003491620000b7565b80620000403362000067565b806200005a576000805460ff60a01b1916600160a01b1790555b50506001600255620000e2565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215620000ca57600080fd5b81518015158114620000db57600080fd5b9392505050565b613a1780620000f26000396000f3fe6080604052600436106102a45760003560e01c80636654f4351161016e578063a91ee0dc116100cb578063df3712e41161007f578063ec4bd8ae11610064578063ec4bd8ae14610813578063ee8df72d14610859578063f2fde38b1461086e57600080fd5b8063df3712e4146107dd578063e9f1bbde146107f357600080fd5b8063beabacc8116100b0578063beabacc814610757578063c558df3814610777578063ce4773d31461079757600080fd5b8063a91ee0dc14610722578063b8b99e4d1461074257600080fd5b80637b763140116101225780638de065b6116101075780638de065b6146106cb57806392f8bce3146106e257806394b6f9d41461070257600080fd5b80637b763140146106805780638da5cb5b146106a057600080fd5b80636c6c65ad116101535780636c6c65ad1461061e578063715018a61461063e5780637b1039991461065357600080fd5b80636654f435146105b857806368173bcf146105fe57600080fd5b8063492fb3431161021c5780635a0a3d82116101d05780635fa7b584116101b55780635fa7b5841461055857806363453ae114610578578063650a16051461059857600080fd5b80635a0a3d82146105165780635f5817e31461053657600080fd5b80634e73db99116102015780634e73db99146104a357806354255be0146104c35780635476bd72146104f657600080fd5b8063492fb3431461046157806349844b1c1461048e57600080fd5b8063158ef93e11610273578063384995cd11610258578063384995cd146103c15780633b9e3ad6146103e1578063436596c41461044c57600080fd5b8063158ef93e1461035f57806331828a5b146103a157600080fd5b8063036235a6146102b057806308906111146102e15780630d1ce2d2146102f757806313e33cea1461031957600080fd5b366102ab57005b600080fd5b3480156102bc57600080fd5b506102ce69d3c21bcecceda100000081565b6040519081526020015b60405180910390f35b3480156102ed57600080fd5b506102ce60065481565b34801561030357600080fd5b506103176103123660046135fd565b61088e565b005b34801561032557600080fd5b506102ce6103343660046135fd565b73ffffffffffffffffffffffffffffffffffffffff1660009081526007602052604090206003015490565b34801561036b57600080fd5b506000546103919074010000000000000000000000000000000000000000900460ff1681565b60405190151581526020016102d8565b3480156103ad57600080fd5b506103916103bc36600461361a565b6108a2565b3480156103cd57600080fd5b506103176103dc366004613646565b610917565b3480156103ed57600080fd5b506104276103fc3660046135fd565b73ffffffffffffffffffffffffffffffffffffffff9081166000908152600760205260409020541690565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102d8565b34801561045857600080fd5b50610317610928565b34801561046d57600080fd5b506005546104279073ffffffffffffffffffffffffffffffffffffffff1681565b34801561049a57600080fd5b506102ce60c881565b3480156104af57600080fd5b506103176104be36600461361a565b610932565b3480156104cf57600080fd5b506001806000806040805194855260208501939093529183015260608201526080016102d8565b34801561050257600080fd5b5061031761051136600461365f565b610948565b34801561052257600080fd5b506103176105313660046135fd565b61095a565b34801561054257600080fd5b5061054b61096b565b6040516102d89190613698565b34801561056457600080fd5b506103176105733660046135fd565b61097c565b34801561058457600080fd5b506103176105933660046135fd565b61098d565b3480156105a457600080fd5b506103176105b336600461373e565b610996565b3480156105c457600080fd5b506102ce6105d33660046135fd565b73ffffffffffffffffffffffffffffffffffffffff1660009081526007602052604090206004015490565b34801561060a57600080fd5b506103176106193660046135fd565b610d41565b34801561062a57600080fd5b506103916106393660046135fd565b610d52565b34801561064a57600080fd5b50610317610d5f565b34801561065f57600080fd5b506001546104279073ffffffffffffffffffffffffffffffffffffffff1681565b34801561068c57600080fd5b5061031761069b3660046135fd565b610d71565b3480156106ac57600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff16610427565b3480156106d757600080fd5b506004546102ce9081565b3480156106ee57600080fd5b506102ce6106fd3660046135fd565b610d7a565b34801561070e57600080fd5b5061031761071d3660046135fd565b610db7565b34801561072e57600080fd5b5061031761073d3660046135fd565b610dc0565b34801561074e57600080fd5b50610317610eb4565b34801561076357600080fd5b50610391610772366004613834565b610ebc565b34801561078357600080fd5b5061031761079236600461361a565b610f67565b3480156107a357600080fd5b506102ce6107b23660046135fd565b73ffffffffffffffffffffffffffffffffffffffff1660009081526007602052604090206002015490565b3480156107e957600080fd5b506102ce60035481565b3480156107ff57600080fd5b5061031761080e36600461365f565b610f79565b34801561081f57600080fd5b506102ce61082e3660046135fd565b73ffffffffffffffffffffffffffffffffffffffff1660009081526007602052604090206005015490565b34801561086557600080fd5b50610317610f8b565b34801561087a57600080fd5b506103176108893660046135fd565b610f93565b610896611047565b61089f816110c8565b50565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600760205260408120600281015482036108dc576000915050610911565b60006108eb62015180426138a4565b90506003548111156109065760038181556002830154908301555b506003015482101590505b92915050565b61091f611047565b61089f81611289565b61093061139d565b565b61093a611047565b61094482826114a8565b5050565b610950611047565b610944828261166d565b610962611047565b61089f81611796565b6060610977600861180f565b905090565b610984611047565b61089f81611823565b61089f816118aa565b60005474010000000000000000000000000000000000000000900460ff1615610a20576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f636f6e747261637420616c726561647920696e697469616c697a65640000000060448201526064015b60405180910390fd5b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055868514610aee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f68616e646c657273206c656e6774682073686f756c64206d6174636820746f6b60448201527f656e73206c656e677468000000000000000000000000000000000000000000006064820152608401610a17565b868314610b7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f6c696d697473206c656e6774682073686f756c64206d6174636820746f6b656e60448201527f73206c656e6774680000000000000000000000000000000000000000000000006064820152608401610a17565b868114610c0c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f6d6178536c697070616765206c656e6774682073686f756c64206d617463682060448201527f746f6b656e73206c656e677468000000000000000000000000000000000000006064820152608401610a17565b610c1533611e0e565b610c1e8b610dc0565b610c278a611796565b610c3089611289565b60005b87811015610d3357610c91898983818110610c5057610c506138df565b9050602002016020810190610c6591906135fd565b888884818110610c7757610c776138df565b9050602002016020810190610c8c91906135fd565b61166d565b610cd9898983818110610ca657610ca66138df565b9050602002016020810190610cbb91906135fd565b868684818110610ccd57610ccd6138df565b90506020020135611e83565b610d21898983818110610cee57610cee6138df565b9050602002016020810190610d0391906135fd565b848484818110610d1557610d156138df565b905060200201356114a8565b80610d2b8161390e565b915050610c33565b505050505050505050505050565b610d49611047565b61089f81611ee7565b6000610911600883611ef2565b610d67611047565b6109306000611e0e565b61089f81611f21565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260076020908152604080832081519283019091526001015490819052610911565b61089f81612085565b610dc8611047565b73ffffffffffffffffffffffffffffffffffffffff8116610e45576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f43616e6e6f7420726567697374657220746865206e756c6c20616464726573736044820152606401610a17565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f27fe5f0c1c3b1ed427cc63d0f05759ffdecf9aec9e18d31ef366fc8a6cb5dc3b90600090a250565b6109306127a2565b6000610ec6611047565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820184905285169063a9059cbb906044016020604051808303816000875af1158015610f3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5f9190613946565b949350505050565b610f6f611047565b6109448282611e83565b610f81611047565b6109448282612aba565b610930612bb0565b610f9b611047565b73ffffffffffffffffffffffffffffffffffffffff811661103e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610a17565b61089f81611e0e565b60005473ffffffffffffffffffffffffffffffffffffffff163314610930576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a17565b73ffffffffffffffffffffffffffffffffffffffff808216600090815260076020526040902080549091161515806111ed57506001546040517f476f6c64546f6b656e0000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff9091169063dcf0aaed90602901604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161117d91815260200190565b602060405180830381865afa15801561119a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111be9190613968565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b611279576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f48616e646c65722068617320746f2062652073657420746f206163746976617460448201527f6520746f6b656e000000000000000000000000000000000000000000000000006064820152608401610a17565b611284600883612bf8565b505050565b6040805160208082018352600091829052825180820184528481528351808301855292909252825190810190925269d3c21bcecceda10000008252906112d49082905b519051111590565b611360576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f4275726e206672616374696f6e206d757374206265206c657373207468616e2060448201527f6f7220657175616c20746f2031000000000000000000000000000000000000006064820152608401610a17565b80516004556040518281527f41c679f4bcdc2c95f79a3647e2237162d9763d86685ef6c667781230c8ba9157906020015b60405180910390a15050565b60005b6113aa6008612c1a565b8110156113dc5760006113be600883612c24565b90506113c9816118aa565b50806113d48161390e565b9150506113a0565b506001546040517f476f6c64546f6b656e000000000000000000000000000000000000000000000060208201526109309173ffffffffffffffffffffffffffffffffffffffff169063dcf0aaed906029015b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161146291815260200190565b602060405180830381865afa15801561147f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a39190613968565b6118aa565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260076020526040812090829003611537576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f43616e6e6f7420736574206d617820736c69707061676520746f207a65726f006044820152606401610a17565b60408051602080820183526000918290528251808201845285905260018401859055825180820184528581528351808301855292909252825190810190925269d3c21bcecceda1000000825261158c916112cc565b611618576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f53706c697070616765206d757374206265206c657373207468616e206f72206560448201527f7175616c20746f203100000000000000000000000000000000000000000000006064820152608401610a17565b6040805173ffffffffffffffffffffffffffffffffffffffff85168152602081018490527fd8df93d785f3d0d4294fd7b61e5d749c20eec95a2fed5b6b502a4cad09199ca691015b60405180910390a1505050565b73ffffffffffffffffffffffffffffffffffffffff81166116ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f43616e2774207365742068616e646c657220746f207a65726f000000000000006044820152606401610a17565b73ffffffffffffffffffffffffffffffffffffffff828116600090815260076020526040902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016918316919091178155611748600884612bf8565b506040805173ffffffffffffffffffffffffffffffffffffffff8086168252841660208201527fdffbd9ded1c09446f09377de547142dcce7dc541c8b0b028142b1eba7026b9e79101611660565b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527ff7015098f8d6fa48f0560725ffd5f81bf687ee5ac45153b590bdcb04648bbdd39060200160405180910390a150565b6060600061181c83612c30565b9392505050565b61182c81611ee7565b73ffffffffffffffffffffffffffffffffffffffff811660008181526007602090815260409182902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000168155915192835290917f4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd39101611391565b6118b2612c8c565b6040517fe583983600000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff919091169063e583983690602401602060405180830381865afa15801561191e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119429190613946565b156119cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f63616e27742063616c6c207768656e20636f6e74726163742069732066726f7a60448201527f656e0000000000000000000000000000000000000000000000000000000000006064820152608401610a17565b6002805403611a3a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a17565b6002805560055473ffffffffffffffffffffffffffffffffffffffff16611ae2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f43616e2774206469737472696275746520746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610a17565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152819060009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015611b51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b759190613985565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260076020526040902080549293509116151580611c9c57506001546040517f476f6c64546f6b656e0000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff9091169063dcf0aaed90602901604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611c2c91815260200190565b602060405180830381865afa158015611c49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6d9190613968565b73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b611d28576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f48616e646c65722068617320746f2062652073657420746f2073656c6c20746f60448201527f6b656e00000000000000000000000000000000000000000000000000000000006064820152608401610a17565b6000611d38838360040154612d50565b905080600003611d4b5750505050611e06565b6005546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152602481018390529085169063a9059cbb906044016020604051808303816000875af1158015611dc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de89190613946565b50808260040154611df9919061399e565b8260040181905550505050505b506001600255565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b73ffffffffffffffffffffffffffffffffffffffff8216600081815260076020908152604091829020600281018590558251938452908301849052917fd3d22ffd28b02735cf411bd7f925bd8da01212c7028153e0d632e2953ac3088e9101611660565b610944600882612d66565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600183016020526040812054151561181c565b6001546040517f476f6c64546f6b656e0000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff9091169063dcf0aaed90602901604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611fa391815260200190565b602060405180830381865afa158015611fc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe49190613968565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461201f5761201f81612085565b6120276127a2565b612030816118aa565b6001546040517f476f6c64546f6b656e0000000000000000000000000000000000000000000000602082015261089f9173ffffffffffffffffffffffffffffffffffffffff169063dcf0aaed9060290161142e565b61208d612c8c565b6040517fe583983600000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff919091169063e583983690602401602060405180830381865afa1580156120f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061211d9190613946565b156121aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f63616e27742063616c6c207768656e20636f6e74726163742069732066726f7a60448201527f656e0000000000000000000000000000000000000000000000000000000000006064820152608401610a17565b6002805403612215576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a17565b6002805573ffffffffffffffffffffffffffffffffffffffff808216600090815260076020526040902080548392166122d0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f48616e646c65722068617320746f2062652073657420746f2073656c6c20746f60448201527f6b656e00000000000000000000000000000000000000000000000000000000006064820152608401610a17565b6040805160208101909152600182015490819052600003612373576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4d617820736c6970706167652068617320746f2062652073657420746f20736560448201527f6c6c20746f6b656e0000000000000000000000000000000000000000000000006064820152608401610a17565b6004808201546040517f70a082310000000000000000000000000000000000000000000000000000000081523092810192909252600091612420919073ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa1580156123ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124119190613985565b61241b919061399e565b612d88565b60408051602081019091526004548152909150600090612449906124449084612e67565b61329e565b9050806124558361329e565b846004015461246491906139b1565b61246e919061399e565b600484015560c88110156124855750505050611e06565b61248f85826108a2565b156124ea575060038201546040805173ffffffffffffffffffffffffffffffffffffffff87168152602081018390527fb1a68b0b66260ca392f760fd4dda4a94818d69c89a4eeb6610eb41db7bab8c37910160405180910390a15b82546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152602481018390529085169063a9059cbb906044016020604051808303816000875af1158015612562573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125869190613946565b5082546001546040517f476f6c64546f6b656e0000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff9283169260009284926331de7d15928b92169063dcf0aaed90602901604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161261a91815260200190565b602060405180830381865afa158015612637573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265b9190613968565b604080516020810190915260018a01549081905287906040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff9485166004820152939092166024840152604483015260648201526084016020604051808303816000875af11580156126ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127139190613985565b90508060065461272391906139b1565b60065560058501546127369084906139b1565b600586015561274587846132b8565b6040805173ffffffffffffffffffffffffffffffffffffffff89168152602081018590527fac094032b4e9dccb3a000eedb94cf30146ca0d7c39be85229f478413fa21d1d8910160405180910390a1505050505050506001600255565b6001546040517f476f6c64546f6b656e00000000000000000000000000000000000000000000006020820152600091600791839173ffffffffffffffffffffffffffffffffffffffff169063dcf0aaed90602901604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161282a91815260200190565b602060405180830381865afa158015612847573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061286b9190613968565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed60405160200161291a907f476f6c64546f6b656e0000000000000000000000000000000000000000000000815260090190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161294e91815260200190565b602060405180830381865afa15801561296b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298f9190613968565b9050600047905060006006548460040154836129ab919061399e565b6129b5919061399e565b604080516020810190915260045481529091506000906129e290612444906129dc85612d88565b90612e67565b90506000600654826129f491906139b1565b6040517f42966c680000000000000000000000000000000000000000000000000000000081526004810182905290915073ffffffffffffffffffffffffffffffffffffffff8616906342966c68906024016020604051808303816000875af1158015612a64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a889190613946565b50600060065560048601548290612aa09085906139b1565b612aaa919061399e565b8660040181905550505050505050565b73ffffffffffffffffffffffffffffffffffffffff8116612b5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f43616e2774207365742068616e646c657220746f207a65726f2c20757365206460448201527f656163746976617465546f6b656e0000000000000000000000000000000000006064820152608401610a17565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260076020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001691909216179055565b60005b612bbd6008612c1a565b811015612bef576000612bd1600883612c24565b9050612bdc81612085565b5080612be78161390e565b915050612bb3565b50610eb461139d565b600061181c8373ffffffffffffffffffffffffffffffffffffffff8416613333565b6000610911825490565b600061181c8383613382565b606081600001805480602002602001604051908101604052809291908181526020018280548015612c8057602002820191906000526020600020905b815481526020019060010190808311612c6c575b50505050509050919050565b6001546040517f467265657a657200000000000000000000000000000000000000000000000000602082015260009173ffffffffffffffffffffffffffffffffffffffff169063dcf0aaed90602701604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401612d0f91815260200190565b602060405180830381865afa158015612d2c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109779190613968565b6000818310612d5f578161181c565b5090919050565b600061181c8373ffffffffffffffffffffffffffffffffffffffff84166133ac565b6040805160208101909152600081527601357c299a88ea76a58924d52ce4f26a85af186c2b9e74821115612e3e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f63616e277420637265617465206669786964697479206e756d626572206c617260448201527f676572207468616e206d61784e657746697865642829000000000000000000006064820152608401610a17565b604051806020016040528069d3c21bcecceda100000084612e5f91906139c4565b905292915050565b60408051602081019091526000815282511580612e8357508151155b15612e9d5750604080516020810190915260008152610911565b81517fffffffffffffffffffffffffffffffffffffffffffff2c3de43133125f00000001612ecc575081610911565b82517fffffffffffffffffffffffffffffffffffffffffffff2c3de43133125f00000001612efb575080610911565b600069d3c21bcecceda1000000612f118561349f565b51612f1c91906138a4565b90506000612f29856134de565b519050600069d3c21bcecceda1000000612f428661349f565b51612f4d91906138a4565b90506000612f5a866134de565b5190506000612f6983866139c4565b90508415612fe35782612f7c86836138a4565b14612fe3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6f766572666c6f772078317931206465746563746564000000000000000000006044820152606401610a17565b6000612ff969d3c21bcecceda1000000836139c4565b9050811561307d5769d3c21bcecceda100000061301683836138a4565b1461307d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f6f766572666c6f772078317931202a20666978656431206465746563746564006044820152606401610a17565b905080600061308c85876139c4565b90508515613106578461309f87836138a4565b14613106576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6f766572666c6f772078327931206465746563746564000000000000000000006044820152606401610a17565b600061311285896139c4565b9050871561318c578461312589836138a4565b1461318c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6f766572666c6f772078317932206465746563746564000000000000000000006044820152606401610a17565b61319b64e8d4a51000886138a4565b96506131ac64e8d4a51000866138a4565b945060006131ba86896139c4565b9050871561323457856131cd89836138a4565b14613234576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6f766572666c6f772078327932206465746563746564000000000000000000006044820152606401610a17565b6040805160208082018352878252825190810190925284825290613259908290613529565b905061327381604051806020016040528086815250613529565b905061328d81604051806020016040528085815250613529565b9d9c50505050505050505050505050565b80516000906109119069d3c21bcecceda1000000906138a4565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260076020526040812060028101549091036132ee57505050565b8181600301546132fe919061399e565b60038201556040518281527fcdcea7139bd245b1c7468bc1cfb59ad732b3b0909bafa9f9436ad74c81d0aafb90602001611660565b600081815260018301602052604081205461337a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610911565b506000610911565b6000826000018281548110613399576133996138df565b9060005260206000200154905092915050565b600081815260018301602052604081205480156134955760006133d060018361399e565b85549091506000906133e49060019061399e565b9050818114613449576000866000018281548110613404576134046138df565b9060005260206000200154905080876000018481548110613427576134276138df565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061345a5761345a6139db565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610911565b6000915050610911565b604080516020810190915260008152604051806020016040528069d3c21bcecceda10000008085600001516134d491906138a4565b612e5f91906139c4565b604080516020810190915260008152604051806020016040528069d3c21bcecceda100000080856000015161351391906138a4565b61351d91906139c4565b8451612e5f919061399e565b60408051602081019091526000815281518351600091613548916139b1565b84519091508110156135b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f616464206f766572666c6f7720646574656374656400000000000000000000006044820152606401610a17565b60408051602081019091529081529392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461089f57600080fd5b80356135f8816135cb565b919050565b60006020828403121561360f57600080fd5b813561181c816135cb565b6000806040838503121561362d57600080fd5b8235613638816135cb565b946020939093013593505050565b60006020828403121561365857600080fd5b5035919050565b6000806040838503121561367257600080fd5b823561367d816135cb565b9150602083013561368d816135cb565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156136e657835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016136b4565b50909695505050505050565b60008083601f84011261370457600080fd5b50813567ffffffffffffffff81111561371c57600080fd5b6020830191508360208260051b850101111561373757600080fd5b9250929050565b600080600080600080600080600080600060e08c8e03121561375f57600080fd5b6137688c6135ed565b9a5061377660208d016135ed565b995060408c0135985067ffffffffffffffff8060608e0135111561379957600080fd5b6137a98e60608f01358f016136f2565b909950975060808d01358110156137bf57600080fd5b6137cf8e60808f01358f016136f2565b909750955060a08d01358110156137e557600080fd5b6137f58e60a08f01358f016136f2565b909550935060c08d013581101561380b57600080fd5b5061381c8d60c08e01358e016136f2565b81935080925050509295989b509295989b9093969950565b60008060006060848603121561384957600080fd5b8335613854816135cb565b92506020840135613864816135cb565b929592945050506040919091013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000826138da577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361393f5761393f613875565b5060010190565b60006020828403121561395857600080fd5b8151801515811461181c57600080fd5b60006020828403121561397a57600080fd5b815161181c816135cb565b60006020828403121561399757600080fd5b5051919050565b8181038181111561091157610911613875565b8082018082111561091157610911613875565b808202811582820484141761091157610911613875565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea164736f6c6343000813000a",
}

// FeeHandlerABI is the input ABI used to generate the binding from.
// Deprecated: Use FeeHandlerMetaData.ABI instead.
var FeeHandlerABI = FeeHandlerMetaData.ABI

// FeeHandlerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use FeeHandlerMetaData.Bin instead.
var FeeHandlerBin = FeeHandlerMetaData.Bin

// DeployFeeHandler deploys a new Ethereum contract, binding an instance of FeeHandler to it.
func DeployFeeHandler(auth *bind.TransactOpts, backend bind.ContractBackend, test bool) (common.Address, *types.Transaction, *FeeHandler, error) {
	parsed, err := FeeHandlerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(FeeHandlerBin), backend, test)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FeeHandler{FeeHandlerCaller: FeeHandlerCaller{contract: contract}, FeeHandlerTransactor: FeeHandlerTransactor{contract: contract}, FeeHandlerFilterer: FeeHandlerFilterer{contract: contract}}, nil
}

// FeeHandler is an auto generated Go binding around an Ethereum contract.
type FeeHandler struct {
	FeeHandlerCaller     // Read-only binding to the contract
	FeeHandlerTransactor // Write-only binding to the contract
	FeeHandlerFilterer   // Log filterer for contract events
}

// FeeHandlerCaller is an auto generated read-only Go binding around an Ethereum contract.
type FeeHandlerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeeHandlerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FeeHandlerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeeHandlerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FeeHandlerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeeHandlerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FeeHandlerSession struct {
	Contract     *FeeHandler       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FeeHandlerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FeeHandlerCallerSession struct {
	Contract *FeeHandlerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// FeeHandlerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FeeHandlerTransactorSession struct {
	Contract     *FeeHandlerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// FeeHandlerRaw is an auto generated low-level Go binding around an Ethereum contract.
type FeeHandlerRaw struct {
	Contract *FeeHandler // Generic contract binding to access the raw methods on
}

// FeeHandlerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FeeHandlerCallerRaw struct {
	Contract *FeeHandlerCaller // Generic read-only contract binding to access the raw methods on
}

// FeeHandlerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FeeHandlerTransactorRaw struct {
	Contract *FeeHandlerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFeeHandler creates a new instance of FeeHandler, bound to a specific deployed contract.
func NewFeeHandler(address common.Address, backend bind.ContractBackend) (*FeeHandler, error) {
	contract, err := bindFeeHandler(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FeeHandler{FeeHandlerCaller: FeeHandlerCaller{contract: contract}, FeeHandlerTransactor: FeeHandlerTransactor{contract: contract}, FeeHandlerFilterer: FeeHandlerFilterer{contract: contract}}, nil
}

// NewFeeHandlerCaller creates a new read-only instance of FeeHandler, bound to a specific deployed contract.
func NewFeeHandlerCaller(address common.Address, caller bind.ContractCaller) (*FeeHandlerCaller, error) {
	contract, err := bindFeeHandler(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FeeHandlerCaller{contract: contract}, nil
}

// NewFeeHandlerTransactor creates a new write-only instance of FeeHandler, bound to a specific deployed contract.
func NewFeeHandlerTransactor(address common.Address, transactor bind.ContractTransactor) (*FeeHandlerTransactor, error) {
	contract, err := bindFeeHandler(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FeeHandlerTransactor{contract: contract}, nil
}

// NewFeeHandlerFilterer creates a new log filterer instance of FeeHandler, bound to a specific deployed contract.
func NewFeeHandlerFilterer(address common.Address, filterer bind.ContractFilterer) (*FeeHandlerFilterer, error) {
	contract, err := bindFeeHandler(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FeeHandlerFilterer{contract: contract}, nil
}

// bindFeeHandler binds a generic wrapper to an already deployed contract.
func bindFeeHandler(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(FeeHandlerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FeeHandler *FeeHandlerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FeeHandler.Contract.FeeHandlerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FeeHandler *FeeHandlerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeeHandler.Contract.FeeHandlerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FeeHandler *FeeHandlerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FeeHandler.Contract.FeeHandlerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FeeHandler *FeeHandlerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FeeHandler.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FeeHandler *FeeHandlerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeeHandler.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FeeHandler *FeeHandlerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FeeHandler.Contract.contract.Transact(opts, method, params...)
}

// FIXED1UINT is a free data retrieval call binding the contract method 0x036235a6.
//
// Solidity: function FIXED1_UINT() view returns(uint256)
func (_FeeHandler *FeeHandlerCaller) FIXED1UINT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "FIXED1_UINT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FIXED1UINT is a free data retrieval call binding the contract method 0x036235a6.
//
// Solidity: function FIXED1_UINT() view returns(uint256)
func (_FeeHandler *FeeHandlerSession) FIXED1UINT() (*big.Int, error) {
	return _FeeHandler.Contract.FIXED1UINT(&_FeeHandler.CallOpts)
}

// FIXED1UINT is a free data retrieval call binding the contract method 0x036235a6.
//
// Solidity: function FIXED1_UINT() view returns(uint256)
func (_FeeHandler *FeeHandlerCallerSession) FIXED1UINT() (*big.Int, error) {
	return _FeeHandler.Contract.FIXED1UINT(&_FeeHandler.CallOpts)
}

// MINBURN is a free data retrieval call binding the contract method 0x49844b1c.
//
// Solidity: function MIN_BURN() view returns(uint256)
func (_FeeHandler *FeeHandlerCaller) MINBURN(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "MIN_BURN")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINBURN is a free data retrieval call binding the contract method 0x49844b1c.
//
// Solidity: function MIN_BURN() view returns(uint256)
func (_FeeHandler *FeeHandlerSession) MINBURN() (*big.Int, error) {
	return _FeeHandler.Contract.MINBURN(&_FeeHandler.CallOpts)
}

// MINBURN is a free data retrieval call binding the contract method 0x49844b1c.
//
// Solidity: function MIN_BURN() view returns(uint256)
func (_FeeHandler *FeeHandlerCallerSession) MINBURN() (*big.Int, error) {
	return _FeeHandler.Contract.MINBURN(&_FeeHandler.CallOpts)
}

// BurnFraction is a free data retrieval call binding the contract method 0x8de065b6.
//
// Solidity: function burnFraction() view returns(uint256 value)
func (_FeeHandler *FeeHandlerCaller) BurnFraction(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "burnFraction")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BurnFraction is a free data retrieval call binding the contract method 0x8de065b6.
//
// Solidity: function burnFraction() view returns(uint256 value)
func (_FeeHandler *FeeHandlerSession) BurnFraction() (*big.Int, error) {
	return _FeeHandler.Contract.BurnFraction(&_FeeHandler.CallOpts)
}

// BurnFraction is a free data retrieval call binding the contract method 0x8de065b6.
//
// Solidity: function burnFraction() view returns(uint256 value)
func (_FeeHandler *FeeHandlerCallerSession) BurnFraction() (*big.Int, error) {
	return _FeeHandler.Contract.BurnFraction(&_FeeHandler.CallOpts)
}

// CeloToBeBurned is a free data retrieval call binding the contract method 0x08906111.
//
// Solidity: function celoToBeBurned() view returns(uint256)
func (_FeeHandler *FeeHandlerCaller) CeloToBeBurned(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "celoToBeBurned")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CeloToBeBurned is a free data retrieval call binding the contract method 0x08906111.
//
// Solidity: function celoToBeBurned() view returns(uint256)
func (_FeeHandler *FeeHandlerSession) CeloToBeBurned() (*big.Int, error) {
	return _FeeHandler.Contract.CeloToBeBurned(&_FeeHandler.CallOpts)
}

// CeloToBeBurned is a free data retrieval call binding the contract method 0x08906111.
//
// Solidity: function celoToBeBurned() view returns(uint256)
func (_FeeHandler *FeeHandlerCallerSession) CeloToBeBurned() (*big.Int, error) {
	return _FeeHandler.Contract.CeloToBeBurned(&_FeeHandler.CallOpts)
}

// FeeBeneficiary is a free data retrieval call binding the contract method 0x492fb343.
//
// Solidity: function feeBeneficiary() view returns(address)
func (_FeeHandler *FeeHandlerCaller) FeeBeneficiary(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "feeBeneficiary")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FeeBeneficiary is a free data retrieval call binding the contract method 0x492fb343.
//
// Solidity: function feeBeneficiary() view returns(address)
func (_FeeHandler *FeeHandlerSession) FeeBeneficiary() (common.Address, error) {
	return _FeeHandler.Contract.FeeBeneficiary(&_FeeHandler.CallOpts)
}

// FeeBeneficiary is a free data retrieval call binding the contract method 0x492fb343.
//
// Solidity: function feeBeneficiary() view returns(address)
func (_FeeHandler *FeeHandlerCallerSession) FeeBeneficiary() (common.Address, error) {
	return _FeeHandler.Contract.FeeBeneficiary(&_FeeHandler.CallOpts)
}

// GetActiveTokens is a free data retrieval call binding the contract method 0x5f5817e3.
//
// Solidity: function getActiveTokens() view returns(address[])
func (_FeeHandler *FeeHandlerCaller) GetActiveTokens(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "getActiveTokens")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetActiveTokens is a free data retrieval call binding the contract method 0x5f5817e3.
//
// Solidity: function getActiveTokens() view returns(address[])
func (_FeeHandler *FeeHandlerSession) GetActiveTokens() ([]common.Address, error) {
	return _FeeHandler.Contract.GetActiveTokens(&_FeeHandler.CallOpts)
}

// GetActiveTokens is a free data retrieval call binding the contract method 0x5f5817e3.
//
// Solidity: function getActiveTokens() view returns(address[])
func (_FeeHandler *FeeHandlerCallerSession) GetActiveTokens() ([]common.Address, error) {
	return _FeeHandler.Contract.GetActiveTokens(&_FeeHandler.CallOpts)
}

// GetPastBurnForToken is a free data retrieval call binding the contract method 0xec4bd8ae.
//
// Solidity: function getPastBurnForToken(address token) view returns(uint256)
func (_FeeHandler *FeeHandlerCaller) GetPastBurnForToken(opts *bind.CallOpts, token common.Address) (*big.Int, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "getPastBurnForToken", token)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastBurnForToken is a free data retrieval call binding the contract method 0xec4bd8ae.
//
// Solidity: function getPastBurnForToken(address token) view returns(uint256)
func (_FeeHandler *FeeHandlerSession) GetPastBurnForToken(token common.Address) (*big.Int, error) {
	return _FeeHandler.Contract.GetPastBurnForToken(&_FeeHandler.CallOpts, token)
}

// GetPastBurnForToken is a free data retrieval call binding the contract method 0xec4bd8ae.
//
// Solidity: function getPastBurnForToken(address token) view returns(uint256)
func (_FeeHandler *FeeHandlerCallerSession) GetPastBurnForToken(token common.Address) (*big.Int, error) {
	return _FeeHandler.Contract.GetPastBurnForToken(&_FeeHandler.CallOpts, token)
}

// GetTokenActive is a free data retrieval call binding the contract method 0x6c6c65ad.
//
// Solidity: function getTokenActive(address tokenAddress) view returns(bool)
func (_FeeHandler *FeeHandlerCaller) GetTokenActive(opts *bind.CallOpts, tokenAddress common.Address) (bool, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "getTokenActive", tokenAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// GetTokenActive is a free data retrieval call binding the contract method 0x6c6c65ad.
//
// Solidity: function getTokenActive(address tokenAddress) view returns(bool)
func (_FeeHandler *FeeHandlerSession) GetTokenActive(tokenAddress common.Address) (bool, error) {
	return _FeeHandler.Contract.GetTokenActive(&_FeeHandler.CallOpts, tokenAddress)
}

// GetTokenActive is a free data retrieval call binding the contract method 0x6c6c65ad.
//
// Solidity: function getTokenActive(address tokenAddress) view returns(bool)
func (_FeeHandler *FeeHandlerCallerSession) GetTokenActive(tokenAddress common.Address) (bool, error) {
	return _FeeHandler.Contract.GetTokenActive(&_FeeHandler.CallOpts, tokenAddress)
}

// GetTokenCurrentDaySellLimit is a free data retrieval call binding the contract method 0x13e33cea.
//
// Solidity: function getTokenCurrentDaySellLimit(address tokenAddress) view returns(uint256)
func (_FeeHandler *FeeHandlerCaller) GetTokenCurrentDaySellLimit(opts *bind.CallOpts, tokenAddress common.Address) (*big.Int, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "getTokenCurrentDaySellLimit", tokenAddress)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTokenCurrentDaySellLimit is a free data retrieval call binding the contract method 0x13e33cea.
//
// Solidity: function getTokenCurrentDaySellLimit(address tokenAddress) view returns(uint256)
func (_FeeHandler *FeeHandlerSession) GetTokenCurrentDaySellLimit(tokenAddress common.Address) (*big.Int, error) {
	return _FeeHandler.Contract.GetTokenCurrentDaySellLimit(&_FeeHandler.CallOpts, tokenAddress)
}

// GetTokenCurrentDaySellLimit is a free data retrieval call binding the contract method 0x13e33cea.
//
// Solidity: function getTokenCurrentDaySellLimit(address tokenAddress) view returns(uint256)
func (_FeeHandler *FeeHandlerCallerSession) GetTokenCurrentDaySellLimit(tokenAddress common.Address) (*big.Int, error) {
	return _FeeHandler.Contract.GetTokenCurrentDaySellLimit(&_FeeHandler.CallOpts, tokenAddress)
}

// GetTokenDailySellLimit is a free data retrieval call binding the contract method 0xce4773d3.
//
// Solidity: function getTokenDailySellLimit(address tokenAddress) view returns(uint256)
func (_FeeHandler *FeeHandlerCaller) GetTokenDailySellLimit(opts *bind.CallOpts, tokenAddress common.Address) (*big.Int, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "getTokenDailySellLimit", tokenAddress)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTokenDailySellLimit is a free data retrieval call binding the contract method 0xce4773d3.
//
// Solidity: function getTokenDailySellLimit(address tokenAddress) view returns(uint256)
func (_FeeHandler *FeeHandlerSession) GetTokenDailySellLimit(tokenAddress common.Address) (*big.Int, error) {
	return _FeeHandler.Contract.GetTokenDailySellLimit(&_FeeHandler.CallOpts, tokenAddress)
}

// GetTokenDailySellLimit is a free data retrieval call binding the contract method 0xce4773d3.
//
// Solidity: function getTokenDailySellLimit(address tokenAddress) view returns(uint256)
func (_FeeHandler *FeeHandlerCallerSession) GetTokenDailySellLimit(tokenAddress common.Address) (*big.Int, error) {
	return _FeeHandler.Contract.GetTokenDailySellLimit(&_FeeHandler.CallOpts, tokenAddress)
}

// GetTokenHandler is a free data retrieval call binding the contract method 0x3b9e3ad6.
//
// Solidity: function getTokenHandler(address tokenAddress) view returns(address)
func (_FeeHandler *FeeHandlerCaller) GetTokenHandler(opts *bind.CallOpts, tokenAddress common.Address) (common.Address, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "getTokenHandler", tokenAddress)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetTokenHandler is a free data retrieval call binding the contract method 0x3b9e3ad6.
//
// Solidity: function getTokenHandler(address tokenAddress) view returns(address)
func (_FeeHandler *FeeHandlerSession) GetTokenHandler(tokenAddress common.Address) (common.Address, error) {
	return _FeeHandler.Contract.GetTokenHandler(&_FeeHandler.CallOpts, tokenAddress)
}

// GetTokenHandler is a free data retrieval call binding the contract method 0x3b9e3ad6.
//
// Solidity: function getTokenHandler(address tokenAddress) view returns(address)
func (_FeeHandler *FeeHandlerCallerSession) GetTokenHandler(tokenAddress common.Address) (common.Address, error) {
	return _FeeHandler.Contract.GetTokenHandler(&_FeeHandler.CallOpts, tokenAddress)
}

// GetTokenMaxSlippage is a free data retrieval call binding the contract method 0x92f8bce3.
//
// Solidity: function getTokenMaxSlippage(address tokenAddress) view returns(uint256)
func (_FeeHandler *FeeHandlerCaller) GetTokenMaxSlippage(opts *bind.CallOpts, tokenAddress common.Address) (*big.Int, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "getTokenMaxSlippage", tokenAddress)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTokenMaxSlippage is a free data retrieval call binding the contract method 0x92f8bce3.
//
// Solidity: function getTokenMaxSlippage(address tokenAddress) view returns(uint256)
func (_FeeHandler *FeeHandlerSession) GetTokenMaxSlippage(tokenAddress common.Address) (*big.Int, error) {
	return _FeeHandler.Contract.GetTokenMaxSlippage(&_FeeHandler.CallOpts, tokenAddress)
}

// GetTokenMaxSlippage is a free data retrieval call binding the contract method 0x92f8bce3.
//
// Solidity: function getTokenMaxSlippage(address tokenAddress) view returns(uint256)
func (_FeeHandler *FeeHandlerCallerSession) GetTokenMaxSlippage(tokenAddress common.Address) (*big.Int, error) {
	return _FeeHandler.Contract.GetTokenMaxSlippage(&_FeeHandler.CallOpts, tokenAddress)
}

// GetTokenToDistribute is a free data retrieval call binding the contract method 0x6654f435.
//
// Solidity: function getTokenToDistribute(address tokenAddress) view returns(uint256)
func (_FeeHandler *FeeHandlerCaller) GetTokenToDistribute(opts *bind.CallOpts, tokenAddress common.Address) (*big.Int, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "getTokenToDistribute", tokenAddress)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTokenToDistribute is a free data retrieval call binding the contract method 0x6654f435.
//
// Solidity: function getTokenToDistribute(address tokenAddress) view returns(uint256)
func (_FeeHandler *FeeHandlerSession) GetTokenToDistribute(tokenAddress common.Address) (*big.Int, error) {
	return _FeeHandler.Contract.GetTokenToDistribute(&_FeeHandler.CallOpts, tokenAddress)
}

// GetTokenToDistribute is a free data retrieval call binding the contract method 0x6654f435.
//
// Solidity: function getTokenToDistribute(address tokenAddress) view returns(uint256)
func (_FeeHandler *FeeHandlerCallerSession) GetTokenToDistribute(tokenAddress common.Address) (*big.Int, error) {
	return _FeeHandler.Contract.GetTokenToDistribute(&_FeeHandler.CallOpts, tokenAddress)
}

// GetVersionNumber is a free data retrieval call binding the contract method 0x54255be0.
//
// Solidity: function getVersionNumber() pure returns(uint256, uint256, uint256, uint256)
func (_FeeHandler *FeeHandlerCaller) GetVersionNumber(opts *bind.CallOpts) (*big.Int, *big.Int, *big.Int, *big.Int, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "getVersionNumber")

	if err != nil {
		return *new(*big.Int), *new(*big.Int), *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return out0, out1, out2, out3, err

}

// GetVersionNumber is a free data retrieval call binding the contract method 0x54255be0.
//
// Solidity: function getVersionNumber() pure returns(uint256, uint256, uint256, uint256)
func (_FeeHandler *FeeHandlerSession) GetVersionNumber() (*big.Int, *big.Int, *big.Int, *big.Int, error) {
	return _FeeHandler.Contract.GetVersionNumber(&_FeeHandler.CallOpts)
}

// GetVersionNumber is a free data retrieval call binding the contract method 0x54255be0.
//
// Solidity: function getVersionNumber() pure returns(uint256, uint256, uint256, uint256)
func (_FeeHandler *FeeHandlerCallerSession) GetVersionNumber() (*big.Int, *big.Int, *big.Int, *big.Int, error) {
	return _FeeHandler.Contract.GetVersionNumber(&_FeeHandler.CallOpts)
}

// Initialized is a free data retrieval call binding the contract method 0x158ef93e.
//
// Solidity: function initialized() view returns(bool)
func (_FeeHandler *FeeHandlerCaller) Initialized(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "initialized")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Initialized is a free data retrieval call binding the contract method 0x158ef93e.
//
// Solidity: function initialized() view returns(bool)
func (_FeeHandler *FeeHandlerSession) Initialized() (bool, error) {
	return _FeeHandler.Contract.Initialized(&_FeeHandler.CallOpts)
}

// Initialized is a free data retrieval call binding the contract method 0x158ef93e.
//
// Solidity: function initialized() view returns(bool)
func (_FeeHandler *FeeHandlerCallerSession) Initialized() (bool, error) {
	return _FeeHandler.Contract.Initialized(&_FeeHandler.CallOpts)
}

// LastLimitDay is a free data retrieval call binding the contract method 0xdf3712e4.
//
// Solidity: function lastLimitDay() view returns(uint256)
func (_FeeHandler *FeeHandlerCaller) LastLimitDay(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "lastLimitDay")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastLimitDay is a free data retrieval call binding the contract method 0xdf3712e4.
//
// Solidity: function lastLimitDay() view returns(uint256)
func (_FeeHandler *FeeHandlerSession) LastLimitDay() (*big.Int, error) {
	return _FeeHandler.Contract.LastLimitDay(&_FeeHandler.CallOpts)
}

// LastLimitDay is a free data retrieval call binding the contract method 0xdf3712e4.
//
// Solidity: function lastLimitDay() view returns(uint256)
func (_FeeHandler *FeeHandlerCallerSession) LastLimitDay() (*big.Int, error) {
	return _FeeHandler.Contract.LastLimitDay(&_FeeHandler.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FeeHandler *FeeHandlerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FeeHandler *FeeHandlerSession) Owner() (common.Address, error) {
	return _FeeHandler.Contract.Owner(&_FeeHandler.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FeeHandler *FeeHandlerCallerSession) Owner() (common.Address, error) {
	return _FeeHandler.Contract.Owner(&_FeeHandler.CallOpts)
}

// Registry is a free data retrieval call binding the contract method 0x7b103999.
//
// Solidity: function registry() view returns(address)
func (_FeeHandler *FeeHandlerCaller) Registry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeeHandler.contract.Call(opts, &out, "registry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Registry is a free data retrieval call binding the contract method 0x7b103999.
//
// Solidity: function registry() view returns(address)
func (_FeeHandler *FeeHandlerSession) Registry() (common.Address, error) {
	return _FeeHandler.Contract.Registry(&_FeeHandler.CallOpts)
}

// Registry is a free data retrieval call binding the contract method 0x7b103999.
//
// Solidity: function registry() view returns(address)
func (_FeeHandler *FeeHandlerCallerSession) Registry() (common.Address, error) {
	return _FeeHandler.Contract.Registry(&_FeeHandler.CallOpts)
}

// ActivateToken is a paid mutator transaction binding the contract method 0x0d1ce2d2.
//
// Solidity: function activateToken(address tokenAddress) returns()
func (_FeeHandler *FeeHandlerTransactor) ActivateToken(opts *bind.TransactOpts, tokenAddress common.Address) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "activateToken", tokenAddress)
}

// ActivateToken is a paid mutator transaction binding the contract method 0x0d1ce2d2.
//
// Solidity: function activateToken(address tokenAddress) returns()
func (_FeeHandler *FeeHandlerSession) ActivateToken(tokenAddress common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.ActivateToken(&_FeeHandler.TransactOpts, tokenAddress)
}

// ActivateToken is a paid mutator transaction binding the contract method 0x0d1ce2d2.
//
// Solidity: function activateToken(address tokenAddress) returns()
func (_FeeHandler *FeeHandlerTransactorSession) ActivateToken(tokenAddress common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.ActivateToken(&_FeeHandler.TransactOpts, tokenAddress)
}

// AddToken is a paid mutator transaction binding the contract method 0x5476bd72.
//
// Solidity: function addToken(address tokenAddress, address handlerAddress) returns()
func (_FeeHandler *FeeHandlerTransactor) AddToken(opts *bind.TransactOpts, tokenAddress common.Address, handlerAddress common.Address) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "addToken", tokenAddress, handlerAddress)
}

// AddToken is a paid mutator transaction binding the contract method 0x5476bd72.
//
// Solidity: function addToken(address tokenAddress, address handlerAddress) returns()
func (_FeeHandler *FeeHandlerSession) AddToken(tokenAddress common.Address, handlerAddress common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.AddToken(&_FeeHandler.TransactOpts, tokenAddress, handlerAddress)
}

// AddToken is a paid mutator transaction binding the contract method 0x5476bd72.
//
// Solidity: function addToken(address tokenAddress, address handlerAddress) returns()
func (_FeeHandler *FeeHandlerTransactorSession) AddToken(tokenAddress common.Address, handlerAddress common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.AddToken(&_FeeHandler.TransactOpts, tokenAddress, handlerAddress)
}

// BurnCelo is a paid mutator transaction binding the contract method 0xb8b99e4d.
//
// Solidity: function burnCelo() returns()
func (_FeeHandler *FeeHandlerTransactor) BurnCelo(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "burnCelo")
}

// BurnCelo is a paid mutator transaction binding the contract method 0xb8b99e4d.
//
// Solidity: function burnCelo() returns()
func (_FeeHandler *FeeHandlerSession) BurnCelo() (*types.Transaction, error) {
	return _FeeHandler.Contract.BurnCelo(&_FeeHandler.TransactOpts)
}

// BurnCelo is a paid mutator transaction binding the contract method 0xb8b99e4d.
//
// Solidity: function burnCelo() returns()
func (_FeeHandler *FeeHandlerTransactorSession) BurnCelo() (*types.Transaction, error) {
	return _FeeHandler.Contract.BurnCelo(&_FeeHandler.TransactOpts)
}

// DailySellLimitHit is a paid mutator transaction binding the contract method 0x31828a5b.
//
// Solidity: function dailySellLimitHit(address token, uint256 amountToBurn) returns(bool)
func (_FeeHandler *FeeHandlerTransactor) DailySellLimitHit(opts *bind.TransactOpts, token common.Address, amountToBurn *big.Int) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "dailySellLimitHit", token, amountToBurn)
}

// DailySellLimitHit is a paid mutator transaction binding the contract method 0x31828a5b.
//
// Solidity: function dailySellLimitHit(address token, uint256 amountToBurn) returns(bool)
func (_FeeHandler *FeeHandlerSession) DailySellLimitHit(token common.Address, amountToBurn *big.Int) (*types.Transaction, error) {
	return _FeeHandler.Contract.DailySellLimitHit(&_FeeHandler.TransactOpts, token, amountToBurn)
}

// DailySellLimitHit is a paid mutator transaction binding the contract method 0x31828a5b.
//
// Solidity: function dailySellLimitHit(address token, uint256 amountToBurn) returns(bool)
func (_FeeHandler *FeeHandlerTransactorSession) DailySellLimitHit(token common.Address, amountToBurn *big.Int) (*types.Transaction, error) {
	return _FeeHandler.Contract.DailySellLimitHit(&_FeeHandler.TransactOpts, token, amountToBurn)
}

// DeactivateToken is a paid mutator transaction binding the contract method 0x68173bcf.
//
// Solidity: function deactivateToken(address tokenAddress) returns()
func (_FeeHandler *FeeHandlerTransactor) DeactivateToken(opts *bind.TransactOpts, tokenAddress common.Address) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "deactivateToken", tokenAddress)
}

// DeactivateToken is a paid mutator transaction binding the contract method 0x68173bcf.
//
// Solidity: function deactivateToken(address tokenAddress) returns()
func (_FeeHandler *FeeHandlerSession) DeactivateToken(tokenAddress common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.DeactivateToken(&_FeeHandler.TransactOpts, tokenAddress)
}

// DeactivateToken is a paid mutator transaction binding the contract method 0x68173bcf.
//
// Solidity: function deactivateToken(address tokenAddress) returns()
func (_FeeHandler *FeeHandlerTransactorSession) DeactivateToken(tokenAddress common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.DeactivateToken(&_FeeHandler.TransactOpts, tokenAddress)
}

// Distribute is a paid mutator transaction binding the contract method 0x63453ae1.
//
// Solidity: function distribute(address tokenAddress) returns()
func (_FeeHandler *FeeHandlerTransactor) Distribute(opts *bind.TransactOpts, tokenAddress common.Address) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "distribute", tokenAddress)
}

// Distribute is a paid mutator transaction binding the contract method 0x63453ae1.
//
// Solidity: function distribute(address tokenAddress) returns()
func (_FeeHandler *FeeHandlerSession) Distribute(tokenAddress common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.Distribute(&_FeeHandler.TransactOpts, tokenAddress)
}

// Distribute is a paid mutator transaction binding the contract method 0x63453ae1.
//
// Solidity: function distribute(address tokenAddress) returns()
func (_FeeHandler *FeeHandlerTransactorSession) Distribute(tokenAddress common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.Distribute(&_FeeHandler.TransactOpts, tokenAddress)
}

// DistributeAll is a paid mutator transaction binding the contract method 0x436596c4.
//
// Solidity: function distributeAll() returns()
func (_FeeHandler *FeeHandlerTransactor) DistributeAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "distributeAll")
}

// DistributeAll is a paid mutator transaction binding the contract method 0x436596c4.
//
// Solidity: function distributeAll() returns()
func (_FeeHandler *FeeHandlerSession) DistributeAll() (*types.Transaction, error) {
	return _FeeHandler.Contract.DistributeAll(&_FeeHandler.TransactOpts)
}

// DistributeAll is a paid mutator transaction binding the contract method 0x436596c4.
//
// Solidity: function distributeAll() returns()
func (_FeeHandler *FeeHandlerTransactorSession) DistributeAll() (*types.Transaction, error) {
	return _FeeHandler.Contract.DistributeAll(&_FeeHandler.TransactOpts)
}

// Handle is a paid mutator transaction binding the contract method 0x7b763140.
//
// Solidity: function handle(address tokenAddress) returns()
func (_FeeHandler *FeeHandlerTransactor) Handle(opts *bind.TransactOpts, tokenAddress common.Address) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "handle", tokenAddress)
}

// Handle is a paid mutator transaction binding the contract method 0x7b763140.
//
// Solidity: function handle(address tokenAddress) returns()
func (_FeeHandler *FeeHandlerSession) Handle(tokenAddress common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.Handle(&_FeeHandler.TransactOpts, tokenAddress)
}

// Handle is a paid mutator transaction binding the contract method 0x7b763140.
//
// Solidity: function handle(address tokenAddress) returns()
func (_FeeHandler *FeeHandlerTransactorSession) Handle(tokenAddress common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.Handle(&_FeeHandler.TransactOpts, tokenAddress)
}

// HandleAll is a paid mutator transaction binding the contract method 0xee8df72d.
//
// Solidity: function handleAll() returns()
func (_FeeHandler *FeeHandlerTransactor) HandleAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "handleAll")
}

// HandleAll is a paid mutator transaction binding the contract method 0xee8df72d.
//
// Solidity: function handleAll() returns()
func (_FeeHandler *FeeHandlerSession) HandleAll() (*types.Transaction, error) {
	return _FeeHandler.Contract.HandleAll(&_FeeHandler.TransactOpts)
}

// HandleAll is a paid mutator transaction binding the contract method 0xee8df72d.
//
// Solidity: function handleAll() returns()
func (_FeeHandler *FeeHandlerTransactorSession) HandleAll() (*types.Transaction, error) {
	return _FeeHandler.Contract.HandleAll(&_FeeHandler.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x650a1605.
//
// Solidity: function initialize(address _registryAddress, address newFeeBeneficiary, uint256 newBurnFraction, address[] tokens, address[] handlers, uint256[] newLimits, uint256[] newMaxSlippages) returns()
func (_FeeHandler *FeeHandlerTransactor) Initialize(opts *bind.TransactOpts, _registryAddress common.Address, newFeeBeneficiary common.Address, newBurnFraction *big.Int, tokens []common.Address, handlers []common.Address, newLimits []*big.Int, newMaxSlippages []*big.Int) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "initialize", _registryAddress, newFeeBeneficiary, newBurnFraction, tokens, handlers, newLimits, newMaxSlippages)
}

// Initialize is a paid mutator transaction binding the contract method 0x650a1605.
//
// Solidity: function initialize(address _registryAddress, address newFeeBeneficiary, uint256 newBurnFraction, address[] tokens, address[] handlers, uint256[] newLimits, uint256[] newMaxSlippages) returns()
func (_FeeHandler *FeeHandlerSession) Initialize(_registryAddress common.Address, newFeeBeneficiary common.Address, newBurnFraction *big.Int, tokens []common.Address, handlers []common.Address, newLimits []*big.Int, newMaxSlippages []*big.Int) (*types.Transaction, error) {
	return _FeeHandler.Contract.Initialize(&_FeeHandler.TransactOpts, _registryAddress, newFeeBeneficiary, newBurnFraction, tokens, handlers, newLimits, newMaxSlippages)
}

// Initialize is a paid mutator transaction binding the contract method 0x650a1605.
//
// Solidity: function initialize(address _registryAddress, address newFeeBeneficiary, uint256 newBurnFraction, address[] tokens, address[] handlers, uint256[] newLimits, uint256[] newMaxSlippages) returns()
func (_FeeHandler *FeeHandlerTransactorSession) Initialize(_registryAddress common.Address, newFeeBeneficiary common.Address, newBurnFraction *big.Int, tokens []common.Address, handlers []common.Address, newLimits []*big.Int, newMaxSlippages []*big.Int) (*types.Transaction, error) {
	return _FeeHandler.Contract.Initialize(&_FeeHandler.TransactOpts, _registryAddress, newFeeBeneficiary, newBurnFraction, tokens, handlers, newLimits, newMaxSlippages)
}

// RemoveToken is a paid mutator transaction binding the contract method 0x5fa7b584.
//
// Solidity: function removeToken(address tokenAddress) returns()
func (_FeeHandler *FeeHandlerTransactor) RemoveToken(opts *bind.TransactOpts, tokenAddress common.Address) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "removeToken", tokenAddress)
}

// RemoveToken is a paid mutator transaction binding the contract method 0x5fa7b584.
//
// Solidity: function removeToken(address tokenAddress) returns()
func (_FeeHandler *FeeHandlerSession) RemoveToken(tokenAddress common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.RemoveToken(&_FeeHandler.TransactOpts, tokenAddress)
}

// RemoveToken is a paid mutator transaction binding the contract method 0x5fa7b584.
//
// Solidity: function removeToken(address tokenAddress) returns()
func (_FeeHandler *FeeHandlerTransactorSession) RemoveToken(tokenAddress common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.RemoveToken(&_FeeHandler.TransactOpts, tokenAddress)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FeeHandler *FeeHandlerTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FeeHandler *FeeHandlerSession) RenounceOwnership() (*types.Transaction, error) {
	return _FeeHandler.Contract.RenounceOwnership(&_FeeHandler.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FeeHandler *FeeHandlerTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _FeeHandler.Contract.RenounceOwnership(&_FeeHandler.TransactOpts)
}

// Sell is a paid mutator transaction binding the contract method 0x94b6f9d4.
//
// Solidity: function sell(address tokenAddress) returns()
func (_FeeHandler *FeeHandlerTransactor) Sell(opts *bind.TransactOpts, tokenAddress common.Address) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "sell", tokenAddress)
}

// Sell is a paid mutator transaction binding the contract method 0x94b6f9d4.
//
// Solidity: function sell(address tokenAddress) returns()
func (_FeeHandler *FeeHandlerSession) Sell(tokenAddress common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.Sell(&_FeeHandler.TransactOpts, tokenAddress)
}

// Sell is a paid mutator transaction binding the contract method 0x94b6f9d4.
//
// Solidity: function sell(address tokenAddress) returns()
func (_FeeHandler *FeeHandlerTransactorSession) Sell(tokenAddress common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.Sell(&_FeeHandler.TransactOpts, tokenAddress)
}

// SetBurnFraction is a paid mutator transaction binding the contract method 0x384995cd.
//
// Solidity: function setBurnFraction(uint256 fraction) returns()
func (_FeeHandler *FeeHandlerTransactor) SetBurnFraction(opts *bind.TransactOpts, fraction *big.Int) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "setBurnFraction", fraction)
}

// SetBurnFraction is a paid mutator transaction binding the contract method 0x384995cd.
//
// Solidity: function setBurnFraction(uint256 fraction) returns()
func (_FeeHandler *FeeHandlerSession) SetBurnFraction(fraction *big.Int) (*types.Transaction, error) {
	return _FeeHandler.Contract.SetBurnFraction(&_FeeHandler.TransactOpts, fraction)
}

// SetBurnFraction is a paid mutator transaction binding the contract method 0x384995cd.
//
// Solidity: function setBurnFraction(uint256 fraction) returns()
func (_FeeHandler *FeeHandlerTransactorSession) SetBurnFraction(fraction *big.Int) (*types.Transaction, error) {
	return _FeeHandler.Contract.SetBurnFraction(&_FeeHandler.TransactOpts, fraction)
}

// SetDailySellLimit is a paid mutator transaction binding the contract method 0xc558df38.
//
// Solidity: function setDailySellLimit(address token, uint256 newLimit) returns()
func (_FeeHandler *FeeHandlerTransactor) SetDailySellLimit(opts *bind.TransactOpts, token common.Address, newLimit *big.Int) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "setDailySellLimit", token, newLimit)
}

// SetDailySellLimit is a paid mutator transaction binding the contract method 0xc558df38.
//
// Solidity: function setDailySellLimit(address token, uint256 newLimit) returns()
func (_FeeHandler *FeeHandlerSession) SetDailySellLimit(token common.Address, newLimit *big.Int) (*types.Transaction, error) {
	return _FeeHandler.Contract.SetDailySellLimit(&_FeeHandler.TransactOpts, token, newLimit)
}

// SetDailySellLimit is a paid mutator transaction binding the contract method 0xc558df38.
//
// Solidity: function setDailySellLimit(address token, uint256 newLimit) returns()
func (_FeeHandler *FeeHandlerTransactorSession) SetDailySellLimit(token common.Address, newLimit *big.Int) (*types.Transaction, error) {
	return _FeeHandler.Contract.SetDailySellLimit(&_FeeHandler.TransactOpts, token, newLimit)
}

// SetFeeBeneficiary is a paid mutator transaction binding the contract method 0x5a0a3d82.
//
// Solidity: function setFeeBeneficiary(address beneficiary) returns()
func (_FeeHandler *FeeHandlerTransactor) SetFeeBeneficiary(opts *bind.TransactOpts, beneficiary common.Address) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "setFeeBeneficiary", beneficiary)
}

// SetFeeBeneficiary is a paid mutator transaction binding the contract method 0x5a0a3d82.
//
// Solidity: function setFeeBeneficiary(address beneficiary) returns()
func (_FeeHandler *FeeHandlerSession) SetFeeBeneficiary(beneficiary common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.SetFeeBeneficiary(&_FeeHandler.TransactOpts, beneficiary)
}

// SetFeeBeneficiary is a paid mutator transaction binding the contract method 0x5a0a3d82.
//
// Solidity: function setFeeBeneficiary(address beneficiary) returns()
func (_FeeHandler *FeeHandlerTransactorSession) SetFeeBeneficiary(beneficiary common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.SetFeeBeneficiary(&_FeeHandler.TransactOpts, beneficiary)
}

// SetHandler is a paid mutator transaction binding the contract method 0xe9f1bbde.
//
// Solidity: function setHandler(address tokenAddress, address handlerAddress) returns()
func (_FeeHandler *FeeHandlerTransactor) SetHandler(opts *bind.TransactOpts, tokenAddress common.Address, handlerAddress common.Address) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "setHandler", tokenAddress, handlerAddress)
}

// SetHandler is a paid mutator transaction binding the contract method 0xe9f1bbde.
//
// Solidity: function setHandler(address tokenAddress, address handlerAddress) returns()
func (_FeeHandler *FeeHandlerSession) SetHandler(tokenAddress common.Address, handlerAddress common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.SetHandler(&_FeeHandler.TransactOpts, tokenAddress, handlerAddress)
}

// SetHandler is a paid mutator transaction binding the contract method 0xe9f1bbde.
//
// Solidity: function setHandler(address tokenAddress, address handlerAddress) returns()
func (_FeeHandler *FeeHandlerTransactorSession) SetHandler(tokenAddress common.Address, handlerAddress common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.SetHandler(&_FeeHandler.TransactOpts, tokenAddress, handlerAddress)
}

// SetMaxSplippage is a paid mutator transaction binding the contract method 0x4e73db99.
//
// Solidity: function setMaxSplippage(address token, uint256 newMax) returns()
func (_FeeHandler *FeeHandlerTransactor) SetMaxSplippage(opts *bind.TransactOpts, token common.Address, newMax *big.Int) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "setMaxSplippage", token, newMax)
}

// SetMaxSplippage is a paid mutator transaction binding the contract method 0x4e73db99.
//
// Solidity: function setMaxSplippage(address token, uint256 newMax) returns()
func (_FeeHandler *FeeHandlerSession) SetMaxSplippage(token common.Address, newMax *big.Int) (*types.Transaction, error) {
	return _FeeHandler.Contract.SetMaxSplippage(&_FeeHandler.TransactOpts, token, newMax)
}

// SetMaxSplippage is a paid mutator transaction binding the contract method 0x4e73db99.
//
// Solidity: function setMaxSplippage(address token, uint256 newMax) returns()
func (_FeeHandler *FeeHandlerTransactorSession) SetMaxSplippage(token common.Address, newMax *big.Int) (*types.Transaction, error) {
	return _FeeHandler.Contract.SetMaxSplippage(&_FeeHandler.TransactOpts, token, newMax)
}

// SetRegistry is a paid mutator transaction binding the contract method 0xa91ee0dc.
//
// Solidity: function setRegistry(address registryAddress) returns()
func (_FeeHandler *FeeHandlerTransactor) SetRegistry(opts *bind.TransactOpts, registryAddress common.Address) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "setRegistry", registryAddress)
}

// SetRegistry is a paid mutator transaction binding the contract method 0xa91ee0dc.
//
// Solidity: function setRegistry(address registryAddress) returns()
func (_FeeHandler *FeeHandlerSession) SetRegistry(registryAddress common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.SetRegistry(&_FeeHandler.TransactOpts, registryAddress)
}

// SetRegistry is a paid mutator transaction binding the contract method 0xa91ee0dc.
//
// Solidity: function setRegistry(address registryAddress) returns()
func (_FeeHandler *FeeHandlerTransactorSession) SetRegistry(registryAddress common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.SetRegistry(&_FeeHandler.TransactOpts, registryAddress)
}

// Transfer is a paid mutator transaction binding the contract method 0xbeabacc8.
//
// Solidity: function transfer(address token, address recipient, uint256 value) returns(bool)
func (_FeeHandler *FeeHandlerTransactor) Transfer(opts *bind.TransactOpts, token common.Address, recipient common.Address, value *big.Int) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "transfer", token, recipient, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xbeabacc8.
//
// Solidity: function transfer(address token, address recipient, uint256 value) returns(bool)
func (_FeeHandler *FeeHandlerSession) Transfer(token common.Address, recipient common.Address, value *big.Int) (*types.Transaction, error) {
	return _FeeHandler.Contract.Transfer(&_FeeHandler.TransactOpts, token, recipient, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xbeabacc8.
//
// Solidity: function transfer(address token, address recipient, uint256 value) returns(bool)
func (_FeeHandler *FeeHandlerTransactorSession) Transfer(token common.Address, recipient common.Address, value *big.Int) (*types.Transaction, error) {
	return _FeeHandler.Contract.Transfer(&_FeeHandler.TransactOpts, token, recipient, value)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FeeHandler *FeeHandlerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _FeeHandler.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FeeHandler *FeeHandlerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.TransferOwnership(&_FeeHandler.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FeeHandler *FeeHandlerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FeeHandler.Contract.TransferOwnership(&_FeeHandler.TransactOpts, newOwner)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_FeeHandler *FeeHandlerTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeeHandler.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_FeeHandler *FeeHandlerSession) Receive() (*types.Transaction, error) {
	return _FeeHandler.Contract.Receive(&_FeeHandler.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_FeeHandler *FeeHandlerTransactorSession) Receive() (*types.Transaction, error) {
	return _FeeHandler.Contract.Receive(&_FeeHandler.TransactOpts)
}

// FeeHandlerBurnFractionSetIterator is returned from FilterBurnFractionSet and is used to iterate over the raw logs and unpacked data for BurnFractionSet events raised by the FeeHandler contract.
type FeeHandlerBurnFractionSetIterator struct {
	Event *FeeHandlerBurnFractionSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeeHandlerBurnFractionSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeeHandlerBurnFractionSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeeHandlerBurnFractionSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeeHandlerBurnFractionSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeeHandlerBurnFractionSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeeHandlerBurnFractionSet represents a BurnFractionSet event raised by the FeeHandler contract.
type FeeHandlerBurnFractionSet struct {
	Fraction *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBurnFractionSet is a free log retrieval operation binding the contract event 0x41c679f4bcdc2c95f79a3647e2237162d9763d86685ef6c667781230c8ba9157.
//
// Solidity: event BurnFractionSet(uint256 fraction)
func (_FeeHandler *FeeHandlerFilterer) FilterBurnFractionSet(opts *bind.FilterOpts) (*FeeHandlerBurnFractionSetIterator, error) {

	logs, sub, err := _FeeHandler.contract.FilterLogs(opts, "BurnFractionSet")
	if err != nil {
		return nil, err
	}
	return &FeeHandlerBurnFractionSetIterator{contract: _FeeHandler.contract, event: "BurnFractionSet", logs: logs, sub: sub}, nil
}

// WatchBurnFractionSet is a free log subscription operation binding the contract event 0x41c679f4bcdc2c95f79a3647e2237162d9763d86685ef6c667781230c8ba9157.
//
// Solidity: event BurnFractionSet(uint256 fraction)
func (_FeeHandler *FeeHandlerFilterer) WatchBurnFractionSet(opts *bind.WatchOpts, sink chan<- *FeeHandlerBurnFractionSet) (event.Subscription, error) {

	logs, sub, err := _FeeHandler.contract.WatchLogs(opts, "BurnFractionSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeeHandlerBurnFractionSet)
				if err := _FeeHandler.contract.UnpackLog(event, "BurnFractionSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurnFractionSet is a log parse operation binding the contract event 0x41c679f4bcdc2c95f79a3647e2237162d9763d86685ef6c667781230c8ba9157.
//
// Solidity: event BurnFractionSet(uint256 fraction)
func (_FeeHandler *FeeHandlerFilterer) ParseBurnFractionSet(log types.Log) (*FeeHandlerBurnFractionSet, error) {
	event := new(FeeHandlerBurnFractionSet)
	if err := _FeeHandler.contract.UnpackLog(event, "BurnFractionSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeeHandlerDailyLimitHitIterator is returned from FilterDailyLimitHit and is used to iterate over the raw logs and unpacked data for DailyLimitHit events raised by the FeeHandler contract.
type FeeHandlerDailyLimitHitIterator struct {
	Event *FeeHandlerDailyLimitHit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeeHandlerDailyLimitHitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeeHandlerDailyLimitHit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeeHandlerDailyLimitHit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeeHandlerDailyLimitHitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeeHandlerDailyLimitHitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeeHandlerDailyLimitHit represents a DailyLimitHit event raised by the FeeHandler contract.
type FeeHandlerDailyLimitHit struct {
	Token   common.Address
	Burning *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterDailyLimitHit is a free log retrieval operation binding the contract event 0xb1a68b0b66260ca392f760fd4dda4a94818d69c89a4eeb6610eb41db7bab8c37.
//
// Solidity: event DailyLimitHit(address token, uint256 burning)
func (_FeeHandler *FeeHandlerFilterer) FilterDailyLimitHit(opts *bind.FilterOpts) (*FeeHandlerDailyLimitHitIterator, error) {

	logs, sub, err := _FeeHandler.contract.FilterLogs(opts, "DailyLimitHit")
	if err != nil {
		return nil, err
	}
	return &FeeHandlerDailyLimitHitIterator{contract: _FeeHandler.contract, event: "DailyLimitHit", logs: logs, sub: sub}, nil
}

// WatchDailyLimitHit is a free log subscription operation binding the contract event 0xb1a68b0b66260ca392f760fd4dda4a94818d69c89a4eeb6610eb41db7bab8c37.
//
// Solidity: event DailyLimitHit(address token, uint256 burning)
func (_FeeHandler *FeeHandlerFilterer) WatchDailyLimitHit(opts *bind.WatchOpts, sink chan<- *FeeHandlerDailyLimitHit) (event.Subscription, error) {

	logs, sub, err := _FeeHandler.contract.WatchLogs(opts, "DailyLimitHit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeeHandlerDailyLimitHit)
				if err := _FeeHandler.contract.UnpackLog(event, "DailyLimitHit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDailyLimitHit is a log parse operation binding the contract event 0xb1a68b0b66260ca392f760fd4dda4a94818d69c89a4eeb6610eb41db7bab8c37.
//
// Solidity: event DailyLimitHit(address token, uint256 burning)
func (_FeeHandler *FeeHandlerFilterer) ParseDailyLimitHit(log types.Log) (*FeeHandlerDailyLimitHit, error) {
	event := new(FeeHandlerDailyLimitHit)
	if err := _FeeHandler.contract.UnpackLog(event, "DailyLimitHit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeeHandlerDailyLimitSetIterator is returned from FilterDailyLimitSet and is used to iterate over the raw logs and unpacked data for DailyLimitSet events raised by the FeeHandler contract.
type FeeHandlerDailyLimitSetIterator struct {
	Event *FeeHandlerDailyLimitSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeeHandlerDailyLimitSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeeHandlerDailyLimitSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeeHandlerDailyLimitSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeeHandlerDailyLimitSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeeHandlerDailyLimitSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeeHandlerDailyLimitSet represents a DailyLimitSet event raised by the FeeHandler contract.
type FeeHandlerDailyLimitSet struct {
	TokenAddress common.Address
	NewLimit     *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDailyLimitSet is a free log retrieval operation binding the contract event 0xd3d22ffd28b02735cf411bd7f925bd8da01212c7028153e0d632e2953ac3088e.
//
// Solidity: event DailyLimitSet(address tokenAddress, uint256 newLimit)
func (_FeeHandler *FeeHandlerFilterer) FilterDailyLimitSet(opts *bind.FilterOpts) (*FeeHandlerDailyLimitSetIterator, error) {

	logs, sub, err := _FeeHandler.contract.FilterLogs(opts, "DailyLimitSet")
	if err != nil {
		return nil, err
	}
	return &FeeHandlerDailyLimitSetIterator{contract: _FeeHandler.contract, event: "DailyLimitSet", logs: logs, sub: sub}, nil
}

// WatchDailyLimitSet is a free log subscription operation binding the contract event 0xd3d22ffd28b02735cf411bd7f925bd8da01212c7028153e0d632e2953ac3088e.
//
// Solidity: event DailyLimitSet(address tokenAddress, uint256 newLimit)
func (_FeeHandler *FeeHandlerFilterer) WatchDailyLimitSet(opts *bind.WatchOpts, sink chan<- *FeeHandlerDailyLimitSet) (event.Subscription, error) {

	logs, sub, err := _FeeHandler.contract.WatchLogs(opts, "DailyLimitSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeeHandlerDailyLimitSet)
				if err := _FeeHandler.contract.UnpackLog(event, "DailyLimitSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDailyLimitSet is a log parse operation binding the contract event 0xd3d22ffd28b02735cf411bd7f925bd8da01212c7028153e0d632e2953ac3088e.
//
// Solidity: event DailyLimitSet(address tokenAddress, uint256 newLimit)
func (_FeeHandler *FeeHandlerFilterer) ParseDailyLimitSet(log types.Log) (*FeeHandlerDailyLimitSet, error) {
	event := new(FeeHandlerDailyLimitSet)
	if err := _FeeHandler.contract.UnpackLog(event, "DailyLimitSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeeHandlerDailySellLimitUpdatedIterator is returned from FilterDailySellLimitUpdated and is used to iterate over the raw logs and unpacked data for DailySellLimitUpdated events raised by the FeeHandler contract.
type FeeHandlerDailySellLimitUpdatedIterator struct {
	Event *FeeHandlerDailySellLimitUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeeHandlerDailySellLimitUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeeHandlerDailySellLimitUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeeHandlerDailySellLimitUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeeHandlerDailySellLimitUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeeHandlerDailySellLimitUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeeHandlerDailySellLimitUpdated represents a DailySellLimitUpdated event raised by the FeeHandler contract.
type FeeHandlerDailySellLimitUpdated struct {
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterDailySellLimitUpdated is a free log retrieval operation binding the contract event 0xcdcea7139bd245b1c7468bc1cfb59ad732b3b0909bafa9f9436ad74c81d0aafb.
//
// Solidity: event DailySellLimitUpdated(uint256 amount)
func (_FeeHandler *FeeHandlerFilterer) FilterDailySellLimitUpdated(opts *bind.FilterOpts) (*FeeHandlerDailySellLimitUpdatedIterator, error) {

	logs, sub, err := _FeeHandler.contract.FilterLogs(opts, "DailySellLimitUpdated")
	if err != nil {
		return nil, err
	}
	return &FeeHandlerDailySellLimitUpdatedIterator{contract: _FeeHandler.contract, event: "DailySellLimitUpdated", logs: logs, sub: sub}, nil
}

// WatchDailySellLimitUpdated is a free log subscription operation binding the contract event 0xcdcea7139bd245b1c7468bc1cfb59ad732b3b0909bafa9f9436ad74c81d0aafb.
//
// Solidity: event DailySellLimitUpdated(uint256 amount)
func (_FeeHandler *FeeHandlerFilterer) WatchDailySellLimitUpdated(opts *bind.WatchOpts, sink chan<- *FeeHandlerDailySellLimitUpdated) (event.Subscription, error) {

	logs, sub, err := _FeeHandler.contract.WatchLogs(opts, "DailySellLimitUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeeHandlerDailySellLimitUpdated)
				if err := _FeeHandler.contract.UnpackLog(event, "DailySellLimitUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDailySellLimitUpdated is a log parse operation binding the contract event 0xcdcea7139bd245b1c7468bc1cfb59ad732b3b0909bafa9f9436ad74c81d0aafb.
//
// Solidity: event DailySellLimitUpdated(uint256 amount)
func (_FeeHandler *FeeHandlerFilterer) ParseDailySellLimitUpdated(log types.Log) (*FeeHandlerDailySellLimitUpdated, error) {
	event := new(FeeHandlerDailySellLimitUpdated)
	if err := _FeeHandler.contract.UnpackLog(event, "DailySellLimitUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeeHandlerFeeBeneficiarySetIterator is returned from FilterFeeBeneficiarySet and is used to iterate over the raw logs and unpacked data for FeeBeneficiarySet events raised by the FeeHandler contract.
type FeeHandlerFeeBeneficiarySetIterator struct {
	Event *FeeHandlerFeeBeneficiarySet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeeHandlerFeeBeneficiarySetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeeHandlerFeeBeneficiarySet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeeHandlerFeeBeneficiarySet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeeHandlerFeeBeneficiarySetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeeHandlerFeeBeneficiarySetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeeHandlerFeeBeneficiarySet represents a FeeBeneficiarySet event raised by the FeeHandler contract.
type FeeHandlerFeeBeneficiarySet struct {
	NewBeneficiary common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterFeeBeneficiarySet is a free log retrieval operation binding the contract event 0xf7015098f8d6fa48f0560725ffd5f81bf687ee5ac45153b590bdcb04648bbdd3.
//
// Solidity: event FeeBeneficiarySet(address newBeneficiary)
func (_FeeHandler *FeeHandlerFilterer) FilterFeeBeneficiarySet(opts *bind.FilterOpts) (*FeeHandlerFeeBeneficiarySetIterator, error) {

	logs, sub, err := _FeeHandler.contract.FilterLogs(opts, "FeeBeneficiarySet")
	if err != nil {
		return nil, err
	}
	return &FeeHandlerFeeBeneficiarySetIterator{contract: _FeeHandler.contract, event: "FeeBeneficiarySet", logs: logs, sub: sub}, nil
}

// WatchFeeBeneficiarySet is a free log subscription operation binding the contract event 0xf7015098f8d6fa48f0560725ffd5f81bf687ee5ac45153b590bdcb04648bbdd3.
//
// Solidity: event FeeBeneficiarySet(address newBeneficiary)
func (_FeeHandler *FeeHandlerFilterer) WatchFeeBeneficiarySet(opts *bind.WatchOpts, sink chan<- *FeeHandlerFeeBeneficiarySet) (event.Subscription, error) {

	logs, sub, err := _FeeHandler.contract.WatchLogs(opts, "FeeBeneficiarySet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeeHandlerFeeBeneficiarySet)
				if err := _FeeHandler.contract.UnpackLog(event, "FeeBeneficiarySet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFeeBeneficiarySet is a log parse operation binding the contract event 0xf7015098f8d6fa48f0560725ffd5f81bf687ee5ac45153b590bdcb04648bbdd3.
//
// Solidity: event FeeBeneficiarySet(address newBeneficiary)
func (_FeeHandler *FeeHandlerFilterer) ParseFeeBeneficiarySet(log types.Log) (*FeeHandlerFeeBeneficiarySet, error) {
	event := new(FeeHandlerFeeBeneficiarySet)
	if err := _FeeHandler.contract.UnpackLog(event, "FeeBeneficiarySet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeeHandlerMaxSlippageSetIterator is returned from FilterMaxSlippageSet and is used to iterate over the raw logs and unpacked data for MaxSlippageSet events raised by the FeeHandler contract.
type FeeHandlerMaxSlippageSetIterator struct {
	Event *FeeHandlerMaxSlippageSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeeHandlerMaxSlippageSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeeHandlerMaxSlippageSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeeHandlerMaxSlippageSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeeHandlerMaxSlippageSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeeHandlerMaxSlippageSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeeHandlerMaxSlippageSet represents a MaxSlippageSet event raised by the FeeHandler contract.
type FeeHandlerMaxSlippageSet struct {
	Token       common.Address
	MaxSlippage *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterMaxSlippageSet is a free log retrieval operation binding the contract event 0xd8df93d785f3d0d4294fd7b61e5d749c20eec95a2fed5b6b502a4cad09199ca6.
//
// Solidity: event MaxSlippageSet(address token, uint256 maxSlippage)
func (_FeeHandler *FeeHandlerFilterer) FilterMaxSlippageSet(opts *bind.FilterOpts) (*FeeHandlerMaxSlippageSetIterator, error) {

	logs, sub, err := _FeeHandler.contract.FilterLogs(opts, "MaxSlippageSet")
	if err != nil {
		return nil, err
	}
	return &FeeHandlerMaxSlippageSetIterator{contract: _FeeHandler.contract, event: "MaxSlippageSet", logs: logs, sub: sub}, nil
}

// WatchMaxSlippageSet is a free log subscription operation binding the contract event 0xd8df93d785f3d0d4294fd7b61e5d749c20eec95a2fed5b6b502a4cad09199ca6.
//
// Solidity: event MaxSlippageSet(address token, uint256 maxSlippage)
func (_FeeHandler *FeeHandlerFilterer) WatchMaxSlippageSet(opts *bind.WatchOpts, sink chan<- *FeeHandlerMaxSlippageSet) (event.Subscription, error) {

	logs, sub, err := _FeeHandler.contract.WatchLogs(opts, "MaxSlippageSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeeHandlerMaxSlippageSet)
				if err := _FeeHandler.contract.UnpackLog(event, "MaxSlippageSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMaxSlippageSet is a log parse operation binding the contract event 0xd8df93d785f3d0d4294fd7b61e5d749c20eec95a2fed5b6b502a4cad09199ca6.
//
// Solidity: event MaxSlippageSet(address token, uint256 maxSlippage)
func (_FeeHandler *FeeHandlerFilterer) ParseMaxSlippageSet(log types.Log) (*FeeHandlerMaxSlippageSet, error) {
	event := new(FeeHandlerMaxSlippageSet)
	if err := _FeeHandler.contract.UnpackLog(event, "MaxSlippageSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeeHandlerOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the FeeHandler contract.
type FeeHandlerOwnershipTransferredIterator struct {
	Event *FeeHandlerOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeeHandlerOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeeHandlerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeeHandlerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeeHandlerOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeeHandlerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeeHandlerOwnershipTransferred represents a OwnershipTransferred event raised by the FeeHandler contract.
type FeeHandlerOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FeeHandler *FeeHandlerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*FeeHandlerOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FeeHandler.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &FeeHandlerOwnershipTransferredIterator{contract: _FeeHandler.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FeeHandler *FeeHandlerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *FeeHandlerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FeeHandler.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeeHandlerOwnershipTransferred)
				if err := _FeeHandler.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FeeHandler *FeeHandlerFilterer) ParseOwnershipTransferred(log types.Log) (*FeeHandlerOwnershipTransferred, error) {
	event := new(FeeHandlerOwnershipTransferred)
	if err := _FeeHandler.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeeHandlerRegistrySetIterator is returned from FilterRegistrySet and is used to iterate over the raw logs and unpacked data for RegistrySet events raised by the FeeHandler contract.
type FeeHandlerRegistrySetIterator struct {
	Event *FeeHandlerRegistrySet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeeHandlerRegistrySetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeeHandlerRegistrySet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeeHandlerRegistrySet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeeHandlerRegistrySetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeeHandlerRegistrySetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeeHandlerRegistrySet represents a RegistrySet event raised by the FeeHandler contract.
type FeeHandlerRegistrySet struct {
	RegistryAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterRegistrySet is a free log retrieval operation binding the contract event 0x27fe5f0c1c3b1ed427cc63d0f05759ffdecf9aec9e18d31ef366fc8a6cb5dc3b.
//
// Solidity: event RegistrySet(address indexed registryAddress)
func (_FeeHandler *FeeHandlerFilterer) FilterRegistrySet(opts *bind.FilterOpts, registryAddress []common.Address) (*FeeHandlerRegistrySetIterator, error) {

	var registryAddressRule []interface{}
	for _, registryAddressItem := range registryAddress {
		registryAddressRule = append(registryAddressRule, registryAddressItem)
	}

	logs, sub, err := _FeeHandler.contract.FilterLogs(opts, "RegistrySet", registryAddressRule)
	if err != nil {
		return nil, err
	}
	return &FeeHandlerRegistrySetIterator{contract: _FeeHandler.contract, event: "RegistrySet", logs: logs, sub: sub}, nil
}

// WatchRegistrySet is a free log subscription operation binding the contract event 0x27fe5f0c1c3b1ed427cc63d0f05759ffdecf9aec9e18d31ef366fc8a6cb5dc3b.
//
// Solidity: event RegistrySet(address indexed registryAddress)
func (_FeeHandler *FeeHandlerFilterer) WatchRegistrySet(opts *bind.WatchOpts, sink chan<- *FeeHandlerRegistrySet, registryAddress []common.Address) (event.Subscription, error) {

	var registryAddressRule []interface{}
	for _, registryAddressItem := range registryAddress {
		registryAddressRule = append(registryAddressRule, registryAddressItem)
	}

	logs, sub, err := _FeeHandler.contract.WatchLogs(opts, "RegistrySet", registryAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeeHandlerRegistrySet)
				if err := _FeeHandler.contract.UnpackLog(event, "RegistrySet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrySet is a log parse operation binding the contract event 0x27fe5f0c1c3b1ed427cc63d0f05759ffdecf9aec9e18d31ef366fc8a6cb5dc3b.
//
// Solidity: event RegistrySet(address indexed registryAddress)
func (_FeeHandler *FeeHandlerFilterer) ParseRegistrySet(log types.Log) (*FeeHandlerRegistrySet, error) {
	event := new(FeeHandlerRegistrySet)
	if err := _FeeHandler.contract.UnpackLog(event, "RegistrySet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeeHandlerSoldAndBurnedTokenIterator is returned from FilterSoldAndBurnedToken and is used to iterate over the raw logs and unpacked data for SoldAndBurnedToken events raised by the FeeHandler contract.
type FeeHandlerSoldAndBurnedTokenIterator struct {
	Event *FeeHandlerSoldAndBurnedToken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeeHandlerSoldAndBurnedTokenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeeHandlerSoldAndBurnedToken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeeHandlerSoldAndBurnedToken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeeHandlerSoldAndBurnedTokenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeeHandlerSoldAndBurnedTokenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeeHandlerSoldAndBurnedToken represents a SoldAndBurnedToken event raised by the FeeHandler contract.
type FeeHandlerSoldAndBurnedToken struct {
	Token common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterSoldAndBurnedToken is a free log retrieval operation binding the contract event 0xac094032b4e9dccb3a000eedb94cf30146ca0d7c39be85229f478413fa21d1d8.
//
// Solidity: event SoldAndBurnedToken(address token, uint256 value)
func (_FeeHandler *FeeHandlerFilterer) FilterSoldAndBurnedToken(opts *bind.FilterOpts) (*FeeHandlerSoldAndBurnedTokenIterator, error) {

	logs, sub, err := _FeeHandler.contract.FilterLogs(opts, "SoldAndBurnedToken")
	if err != nil {
		return nil, err
	}
	return &FeeHandlerSoldAndBurnedTokenIterator{contract: _FeeHandler.contract, event: "SoldAndBurnedToken", logs: logs, sub: sub}, nil
}

// WatchSoldAndBurnedToken is a free log subscription operation binding the contract event 0xac094032b4e9dccb3a000eedb94cf30146ca0d7c39be85229f478413fa21d1d8.
//
// Solidity: event SoldAndBurnedToken(address token, uint256 value)
func (_FeeHandler *FeeHandlerFilterer) WatchSoldAndBurnedToken(opts *bind.WatchOpts, sink chan<- *FeeHandlerSoldAndBurnedToken) (event.Subscription, error) {

	logs, sub, err := _FeeHandler.contract.WatchLogs(opts, "SoldAndBurnedToken")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeeHandlerSoldAndBurnedToken)
				if err := _FeeHandler.contract.UnpackLog(event, "SoldAndBurnedToken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSoldAndBurnedToken is a log parse operation binding the contract event 0xac094032b4e9dccb3a000eedb94cf30146ca0d7c39be85229f478413fa21d1d8.
//
// Solidity: event SoldAndBurnedToken(address token, uint256 value)
func (_FeeHandler *FeeHandlerFilterer) ParseSoldAndBurnedToken(log types.Log) (*FeeHandlerSoldAndBurnedToken, error) {
	event := new(FeeHandlerSoldAndBurnedToken)
	if err := _FeeHandler.contract.UnpackLog(event, "SoldAndBurnedToken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeeHandlerTokenAddedIterator is returned from FilterTokenAdded and is used to iterate over the raw logs and unpacked data for TokenAdded events raised by the FeeHandler contract.
type FeeHandlerTokenAddedIterator struct {
	Event *FeeHandlerTokenAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeeHandlerTokenAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeeHandlerTokenAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeeHandlerTokenAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeeHandlerTokenAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeeHandlerTokenAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeeHandlerTokenAdded represents a TokenAdded event raised by the FeeHandler contract.
type FeeHandlerTokenAdded struct {
	TokenAddress   common.Address
	HandlerAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterTokenAdded is a free log retrieval operation binding the contract event 0xdffbd9ded1c09446f09377de547142dcce7dc541c8b0b028142b1eba7026b9e7.
//
// Solidity: event TokenAdded(address tokenAddress, address handlerAddress)
func (_FeeHandler *FeeHandlerFilterer) FilterTokenAdded(opts *bind.FilterOpts) (*FeeHandlerTokenAddedIterator, error) {

	logs, sub, err := _FeeHandler.contract.FilterLogs(opts, "TokenAdded")
	if err != nil {
		return nil, err
	}
	return &FeeHandlerTokenAddedIterator{contract: _FeeHandler.contract, event: "TokenAdded", logs: logs, sub: sub}, nil
}

// WatchTokenAdded is a free log subscription operation binding the contract event 0xdffbd9ded1c09446f09377de547142dcce7dc541c8b0b028142b1eba7026b9e7.
//
// Solidity: event TokenAdded(address tokenAddress, address handlerAddress)
func (_FeeHandler *FeeHandlerFilterer) WatchTokenAdded(opts *bind.WatchOpts, sink chan<- *FeeHandlerTokenAdded) (event.Subscription, error) {

	logs, sub, err := _FeeHandler.contract.WatchLogs(opts, "TokenAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeeHandlerTokenAdded)
				if err := _FeeHandler.contract.UnpackLog(event, "TokenAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokenAdded is a log parse operation binding the contract event 0xdffbd9ded1c09446f09377de547142dcce7dc541c8b0b028142b1eba7026b9e7.
//
// Solidity: event TokenAdded(address tokenAddress, address handlerAddress)
func (_FeeHandler *FeeHandlerFilterer) ParseTokenAdded(log types.Log) (*FeeHandlerTokenAdded, error) {
	event := new(FeeHandlerTokenAdded)
	if err := _FeeHandler.contract.UnpackLog(event, "TokenAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeeHandlerTokenRemovedIterator is returned from FilterTokenRemoved and is used to iterate over the raw logs and unpacked data for TokenRemoved events raised by the FeeHandler contract.
type FeeHandlerTokenRemovedIterator struct {
	Event *FeeHandlerTokenRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeeHandlerTokenRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeeHandlerTokenRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeeHandlerTokenRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeeHandlerTokenRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeeHandlerTokenRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeeHandlerTokenRemoved represents a TokenRemoved event raised by the FeeHandler contract.
type FeeHandlerTokenRemoved struct {
	TokenAddress common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterTokenRemoved is a free log retrieval operation binding the contract event 0x4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd3.
//
// Solidity: event TokenRemoved(address tokenAddress)
func (_FeeHandler *FeeHandlerFilterer) FilterTokenRemoved(opts *bind.FilterOpts) (*FeeHandlerTokenRemovedIterator, error) {

	logs, sub, err := _FeeHandler.contract.FilterLogs(opts, "TokenRemoved")
	if err != nil {
		return nil, err
	}
	return &FeeHandlerTokenRemovedIterator{contract: _FeeHandler.contract, event: "TokenRemoved", logs: logs, sub: sub}, nil
}

// WatchTokenRemoved is a free log subscription operation binding the contract event 0x4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd3.
//
// Solidity: event TokenRemoved(address tokenAddress)
func (_FeeHandler *FeeHandlerFilterer) WatchTokenRemoved(opts *bind.WatchOpts, sink chan<- *FeeHandlerTokenRemoved) (event.Subscription, error) {

	logs, sub, err := _FeeHandler.contract.WatchLogs(opts, "TokenRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeeHandlerTokenRemoved)
				if err := _FeeHandler.contract.UnpackLog(event, "TokenRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokenRemoved is a log parse operation binding the contract event 0x4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd3.
//
// Solidity: event TokenRemoved(address tokenAddress)
func (_FeeHandler *FeeHandlerFilterer) ParseTokenRemoved(log types.Log) (*FeeHandlerTokenRemoved, error) {
	event := new(FeeHandlerTokenRemoved)
	if err := _FeeHandler.contract.UnpackLog(event, "TokenRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
