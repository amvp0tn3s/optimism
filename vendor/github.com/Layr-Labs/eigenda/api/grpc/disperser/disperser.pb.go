// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.25.0
// source: disperser/disperser.proto

package disperser

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BlobStatus int32

const (
	BlobStatus_UNKNOWN BlobStatus = 0
	// PROCESSING means that the blob is currently being processed by the disperser
	BlobStatus_PROCESSING BlobStatus = 1
	// CONFIRMED means that the blob has been dispersed and the dispersed batch containing the blob has been confirmed onchain
	BlobStatus_CONFIRMED BlobStatus = 2
	// FAILED means that the blob has failed permanently
	BlobStatus_FAILED BlobStatus = 3
	// FINALIZED means that the block containing the blob's confirmation transaction has been finalized on Ethereum
	BlobStatus_FINALIZED BlobStatus = 4
)

// Enum value maps for BlobStatus.
var (
	BlobStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "PROCESSING",
		2: "CONFIRMED",
		3: "FAILED",
		4: "FINALIZED",
	}
	BlobStatus_value = map[string]int32{
		"UNKNOWN":    0,
		"PROCESSING": 1,
		"CONFIRMED":  2,
		"FAILED":     3,
		"FINALIZED":  4,
	}
)

func (x BlobStatus) Enum() *BlobStatus {
	p := new(BlobStatus)
	*p = x
	return p
}

func (x BlobStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlobStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_disperser_disperser_proto_enumTypes[0].Descriptor()
}

func (BlobStatus) Type() protoreflect.EnumType {
	return &file_disperser_disperser_proto_enumTypes[0]
}

func (x BlobStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlobStatus.Descriptor instead.
func (BlobStatus) EnumDescriptor() ([]byte, []int) {
	return file_disperser_disperser_proto_rawDescGZIP(), []int{0}
}

// DisperseBlobRequest contains the blob data to be dispersed.
type DisperseBlobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data           []byte            `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	SecurityParams []*SecurityParams `protobuf:"bytes,2,rep,name=security_params,json=securityParams,proto3" json:"security_params,omitempty"`
}

func (x *DisperseBlobRequest) Reset() {
	*x = DisperseBlobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_disperser_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisperseBlobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisperseBlobRequest) ProtoMessage() {}

func (x *DisperseBlobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_disperser_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisperseBlobRequest.ProtoReflect.Descriptor instead.
func (*DisperseBlobRequest) Descriptor() ([]byte, []int) {
	return file_disperser_disperser_proto_rawDescGZIP(), []int{0}
}

func (x *DisperseBlobRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DisperseBlobRequest) GetSecurityParams() []*SecurityParams {
	if x != nil {
		return x.SecurityParams
	}
	return nil
}

// DisperseBlobReply contains a request ID generated by the disperser, which must be unique across all blobs within its store.
// The rollup must use this ID to query the status of the blob. Since commitments have not yet been generated, they cannot be used as a key.
type DisperseBlobReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    BlobStatus `protobuf:"varint,1,opt,name=result,proto3,enum=disperser.BlobStatus" json:"result,omitempty"`
	RequestId []byte     `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *DisperseBlobReply) Reset() {
	*x = DisperseBlobReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_disperser_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisperseBlobReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisperseBlobReply) ProtoMessage() {}

func (x *DisperseBlobReply) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_disperser_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisperseBlobReply.ProtoReflect.Descriptor instead.
func (*DisperseBlobReply) Descriptor() ([]byte, []int) {
	return file_disperser_disperser_proto_rawDescGZIP(), []int{1}
}

func (x *DisperseBlobReply) GetResult() BlobStatus {
	if x != nil {
		return x.Result
	}
	return BlobStatus_UNKNOWN
}

func (x *DisperseBlobReply) GetRequestId() []byte {
	if x != nil {
		return x.RequestId
	}
	return nil
}

// BlobStatusRequest is used to query the status of a blob.
type BlobStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId []byte `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *BlobStatusRequest) Reset() {
	*x = BlobStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_disperser_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobStatusRequest) ProtoMessage() {}

func (x *BlobStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_disperser_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobStatusRequest.ProtoReflect.Descriptor instead.
func (*BlobStatusRequest) Descriptor() ([]byte, []int) {
	return file_disperser_disperser_proto_rawDescGZIP(), []int{2}
}

func (x *BlobStatusRequest) GetRequestId() []byte {
	if x != nil {
		return x.RequestId
	}
	return nil
}

// BlobStatusReply contains the status of the blob, as well as the blob's info which includes information needed to confirm the blob
// against the EigenDA contracts
type BlobStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status BlobStatus `protobuf:"varint,1,opt,name=status,proto3,enum=disperser.BlobStatus" json:"status,omitempty"`
	Info   *BlobInfo  `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *BlobStatusReply) Reset() {
	*x = BlobStatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_disperser_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobStatusReply) ProtoMessage() {}

func (x *BlobStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_disperser_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobStatusReply.ProtoReflect.Descriptor instead.
func (*BlobStatusReply) Descriptor() ([]byte, []int) {
	return file_disperser_disperser_proto_rawDescGZIP(), []int{3}
}

func (x *BlobStatusReply) GetStatus() BlobStatus {
	if x != nil {
		return x.Status
	}
	return BlobStatus_UNKNOWN
}

func (x *BlobStatusReply) GetInfo() *BlobInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

// SecurityParams contains the security parameters for a given quorum
type SecurityParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuorumId           uint32 `protobuf:"varint,1,opt,name=quorum_id,json=quorumId,proto3" json:"quorum_id,omitempty"`
	AdversaryThreshold uint32 `protobuf:"varint,2,opt,name=adversary_threshold,json=adversaryThreshold,proto3" json:"adversary_threshold,omitempty"`
	QuorumThreshold    uint32 `protobuf:"varint,3,opt,name=quorum_threshold,json=quorumThreshold,proto3" json:"quorum_threshold,omitempty"`
}

func (x *SecurityParams) Reset() {
	*x = SecurityParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_disperser_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityParams) ProtoMessage() {}

func (x *SecurityParams) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_disperser_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityParams.ProtoReflect.Descriptor instead.
func (*SecurityParams) Descriptor() ([]byte, []int) {
	return file_disperser_disperser_proto_rawDescGZIP(), []int{4}
}

func (x *SecurityParams) GetQuorumId() uint32 {
	if x != nil {
		return x.QuorumId
	}
	return 0
}

func (x *SecurityParams) GetAdversaryThreshold() uint32 {
	if x != nil {
		return x.AdversaryThreshold
	}
	return 0
}

func (x *SecurityParams) GetQuorumThreshold() uint32 {
	if x != nil {
		return x.QuorumThreshold
	}
	return 0
}

// BlobInfo contains information needed to confirm the blob against the EigenDA contracts
type BlobInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlobHeader            *BlobHeader            `protobuf:"bytes,1,opt,name=blob_header,json=blobHeader,proto3" json:"blob_header,omitempty"`
	BlobVerificationProof *BlobVerificationProof `protobuf:"bytes,2,opt,name=blob_verification_proof,json=blobVerificationProof,proto3" json:"blob_verification_proof,omitempty"`
}

func (x *BlobInfo) Reset() {
	*x = BlobInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_disperser_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobInfo) ProtoMessage() {}

func (x *BlobInfo) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_disperser_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobInfo.ProtoReflect.Descriptor instead.
func (*BlobInfo) Descriptor() ([]byte, []int) {
	return file_disperser_disperser_proto_rawDescGZIP(), []int{5}
}

func (x *BlobInfo) GetBlobHeader() *BlobHeader {
	if x != nil {
		return x.BlobHeader
	}
	return nil
}

func (x *BlobInfo) GetBlobVerificationProof() *BlobVerificationProof {
	if x != nil {
		return x.BlobVerificationProof
	}
	return nil
}

type BlobQuorumParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuorumNumber                 uint32 `protobuf:"varint,1,opt,name=quorum_number,json=quorumNumber,proto3" json:"quorum_number,omitempty"`
	AdversaryThresholdPercentage uint32 `protobuf:"varint,2,opt,name=adversary_threshold_percentage,json=adversaryThresholdPercentage,proto3" json:"adversary_threshold_percentage,omitempty"`
	QuorumThresholdPercentage    uint32 `protobuf:"varint,3,opt,name=quorum_threshold_percentage,json=quorumThresholdPercentage,proto3" json:"quorum_threshold_percentage,omitempty"`
	QuantizationParam            uint32 `protobuf:"varint,4,opt,name=quantization_param,json=quantizationParam,proto3" json:"quantization_param,omitempty"`
	EncodedLength                uint64 `protobuf:"varint,5,opt,name=encoded_length,json=encodedLength,proto3" json:"encoded_length,omitempty"`
}

func (x *BlobQuorumParam) Reset() {
	*x = BlobQuorumParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_disperser_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobQuorumParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobQuorumParam) ProtoMessage() {}

func (x *BlobQuorumParam) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_disperser_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobQuorumParam.ProtoReflect.Descriptor instead.
func (*BlobQuorumParam) Descriptor() ([]byte, []int) {
	return file_disperser_disperser_proto_rawDescGZIP(), []int{6}
}

func (x *BlobQuorumParam) GetQuorumNumber() uint32 {
	if x != nil {
		return x.QuorumNumber
	}
	return 0
}

func (x *BlobQuorumParam) GetAdversaryThresholdPercentage() uint32 {
	if x != nil {
		return x.AdversaryThresholdPercentage
	}
	return 0
}

func (x *BlobQuorumParam) GetQuorumThresholdPercentage() uint32 {
	if x != nil {
		return x.QuorumThresholdPercentage
	}
	return 0
}

func (x *BlobQuorumParam) GetQuantizationParam() uint32 {
	if x != nil {
		return x.QuantizationParam
	}
	return 0
}

func (x *BlobQuorumParam) GetEncodedLength() uint64 {
	if x != nil {
		return x.EncodedLength
	}
	return 0
}

type BlobHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// KZG commitment to the blob
	Commitment []byte `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment,omitempty"`
	// the length of the blob in coefficients of the polynomial
	DataLength       uint32             `protobuf:"varint,2,opt,name=data_length,json=dataLength,proto3" json:"data_length,omitempty"`
	BlobQuorumParams []*BlobQuorumParam `protobuf:"bytes,3,rep,name=blob_quorum_params,json=blobQuorumParams,proto3" json:"blob_quorum_params,omitempty"`
}

func (x *BlobHeader) Reset() {
	*x = BlobHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_disperser_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobHeader) ProtoMessage() {}

func (x *BlobHeader) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_disperser_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobHeader.ProtoReflect.Descriptor instead.
func (*BlobHeader) Descriptor() ([]byte, []int) {
	return file_disperser_disperser_proto_rawDescGZIP(), []int{7}
}

func (x *BlobHeader) GetCommitment() []byte {
	if x != nil {
		return x.Commitment
	}
	return nil
}

func (x *BlobHeader) GetDataLength() uint32 {
	if x != nil {
		return x.DataLength
	}
	return 0
}

func (x *BlobHeader) GetBlobQuorumParams() []*BlobQuorumParam {
	if x != nil {
		return x.BlobQuorumParams
	}
	return nil
}

type BatchHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// root of the merkle tree containing blob headers
	BatchRoot               []byte `protobuf:"bytes,1,opt,name=batch_root,json=batchRoot,proto3" json:"batch_root,omitempty"`
	QuorumNumbers           []byte `protobuf:"bytes,2,opt,name=quorum_numbers,json=quorumNumbers,proto3" json:"quorum_numbers,omitempty"`
	QuorumSignedPercentages []byte `protobuf:"bytes,3,opt,name=quorum_signed_percentages,json=quorumSignedPercentages,proto3" json:"quorum_signed_percentages,omitempty"`
	ReferenceBlockNumber    uint32 `protobuf:"varint,4,opt,name=reference_block_number,json=referenceBlockNumber,proto3" json:"reference_block_number,omitempty"`
}

func (x *BatchHeader) Reset() {
	*x = BatchHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_disperser_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchHeader) ProtoMessage() {}

func (x *BatchHeader) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_disperser_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchHeader.ProtoReflect.Descriptor instead.
func (*BatchHeader) Descriptor() ([]byte, []int) {
	return file_disperser_disperser_proto_rawDescGZIP(), []int{8}
}

func (x *BatchHeader) GetBatchRoot() []byte {
	if x != nil {
		return x.BatchRoot
	}
	return nil
}

func (x *BatchHeader) GetQuorumNumbers() []byte {
	if x != nil {
		return x.QuorumNumbers
	}
	return nil
}

func (x *BatchHeader) GetQuorumSignedPercentages() []byte {
	if x != nil {
		return x.QuorumSignedPercentages
	}
	return nil
}

func (x *BatchHeader) GetReferenceBlockNumber() uint32 {
	if x != nil {
		return x.ReferenceBlockNumber
	}
	return 0
}

type BlobVerificationProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// batch_id is an incremental ID assigned to a batch by EigenDAServiceManager
	BatchId       uint32         `protobuf:"varint,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	BlobIndex     uint32         `protobuf:"varint,2,opt,name=blob_index,json=blobIndex,proto3" json:"blob_index,omitempty"`
	BatchMetadata *BatchMetadata `protobuf:"bytes,3,opt,name=batch_metadata,json=batchMetadata,proto3" json:"batch_metadata,omitempty"`
	// inclusion_proof is a merkle proof for a blob header's inclusion in a batch
	InclusionProof []byte `protobuf:"bytes,4,opt,name=inclusion_proof,json=inclusionProof,proto3" json:"inclusion_proof,omitempty"`
	// indexes of quorums in BatchHeader.quorum_numbers that match the quorums in BlobHeader.blob_quorum_params
	// Ex. BlobHeader.blob_quorum_params = [
	//
	//	{
	//		quorum_number = 0,
	//		...
	//	},
	//	{
	//		quorum_number = 3,
	//		...
	//	},
	//	{
	//		quorum_number = 5,
	//		...
	//	},
	//
	// ]
	// BatchHeader.quorum_numbers = [0, 5, 3] => 0x000503
	// Then, quorum_indexes = [0, 2, 1] => 0x000201
	QuorumIndexes []byte `protobuf:"bytes,5,opt,name=quorum_indexes,json=quorumIndexes,proto3" json:"quorum_indexes,omitempty"`
}

func (x *BlobVerificationProof) Reset() {
	*x = BlobVerificationProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_disperser_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobVerificationProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobVerificationProof) ProtoMessage() {}

func (x *BlobVerificationProof) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_disperser_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobVerificationProof.ProtoReflect.Descriptor instead.
func (*BlobVerificationProof) Descriptor() ([]byte, []int) {
	return file_disperser_disperser_proto_rawDescGZIP(), []int{9}
}

func (x *BlobVerificationProof) GetBatchId() uint32 {
	if x != nil {
		return x.BatchId
	}
	return 0
}

func (x *BlobVerificationProof) GetBlobIndex() uint32 {
	if x != nil {
		return x.BlobIndex
	}
	return 0
}

func (x *BlobVerificationProof) GetBatchMetadata() *BatchMetadata {
	if x != nil {
		return x.BatchMetadata
	}
	return nil
}

func (x *BlobVerificationProof) GetInclusionProof() []byte {
	if x != nil {
		return x.InclusionProof
	}
	return nil
}

func (x *BlobVerificationProof) GetQuorumIndexes() []byte {
	if x != nil {
		return x.QuorumIndexes
	}
	return nil
}

type BatchMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchHeader         *BatchHeader `protobuf:"bytes,1,opt,name=batch_header,json=batchHeader,proto3" json:"batch_header,omitempty"`
	SignatoryRecordHash []byte       `protobuf:"bytes,2,opt,name=signatory_record_hash,json=signatoryRecordHash,proto3" json:"signatory_record_hash,omitempty"`
	// bytes representation of the big.Int value
	Fee                     []byte `protobuf:"bytes,3,opt,name=fee,proto3" json:"fee,omitempty"`
	ConfirmationBlockNumber uint32 `protobuf:"varint,4,opt,name=confirmation_block_number,json=confirmationBlockNumber,proto3" json:"confirmation_block_number,omitempty"`
	BatchHeaderHash         []byte `protobuf:"bytes,5,opt,name=batch_header_hash,json=batchHeaderHash,proto3" json:"batch_header_hash,omitempty"`
}

func (x *BatchMetadata) Reset() {
	*x = BatchMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_disperser_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchMetadata) ProtoMessage() {}

func (x *BatchMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_disperser_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchMetadata.ProtoReflect.Descriptor instead.
func (*BatchMetadata) Descriptor() ([]byte, []int) {
	return file_disperser_disperser_proto_rawDescGZIP(), []int{10}
}

func (x *BatchMetadata) GetBatchHeader() *BatchHeader {
	if x != nil {
		return x.BatchHeader
	}
	return nil
}

func (x *BatchMetadata) GetSignatoryRecordHash() []byte {
	if x != nil {
		return x.SignatoryRecordHash
	}
	return nil
}

func (x *BatchMetadata) GetFee() []byte {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *BatchMetadata) GetConfirmationBlockNumber() uint32 {
	if x != nil {
		return x.ConfirmationBlockNumber
	}
	return 0
}

func (x *BatchMetadata) GetBatchHeaderHash() []byte {
	if x != nil {
		return x.BatchHeaderHash
	}
	return nil
}

var File_disperser_disperser_proto protoreflect.FileDescriptor

var file_disperser_disperser_proto_rawDesc = []byte{
	0x0a, 0x19, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2f, 0x64, 0x69, 0x73, 0x70,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x64, 0x69, 0x73,
	0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x22, 0x6d, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x70, 0x65, 0x72,
	0x73, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x42, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x69, 0x73,
	0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x61, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73,
	0x65, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x73,
	0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x11, 0x42, 0x6c, 0x6f, 0x62,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x0f,
	0x42, 0x6c, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x62,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64,
	0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x89, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x75,
	0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x71,
	0x75, 0x6f, 0x72, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x61, 0x72, 0x79, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x71, 0x75, 0x6f, 0x72,
	0x75, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x08, 0x42, 0x6c, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x36, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0a, 0x62, 0x6c,
	0x6f, 0x62, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x17, 0x62, 0x6c, 0x6f, 0x62,
	0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x69, 0x73, 0x70,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x15, 0x62, 0x6c, 0x6f,
	0x62, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x22, 0x92, 0x02, 0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x62, 0x51, 0x75, 0x6f, 0x72, 0x75,
	0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x71,
	0x75, 0x6f, 0x72, 0x75, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x1e, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x73, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1c, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x61, 0x72, 0x79, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x2d, 0x0a, 0x12, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x97, 0x01, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x62,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x48, 0x0a, 0x12, 0x62, 0x6c, 0x6f, 0x62, 0x5f,
	0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e,
	0x42, 0x6c, 0x6f, 0x62, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52,
	0x10, 0x62, 0x6c, 0x6f, 0x62, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x22, 0xc5, 0x01, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x71, 0x75, 0x6f, 0x72, 0x75,
	0x6d, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x71, 0x75, 0x6f, 0x72,
	0x75, 0x6d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xe2, 0x01, 0x0a, 0x15, 0x42, 0x6c,
	0x6f, 0x62, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x62, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3f, 0x0a,
	0x0e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27,
	0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x6f, 0x72, 0x75,
	0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x22, 0xf8,
	0x01, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x39, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0b,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x66, 0x65,
	0x65, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a,
	0x11, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x2a, 0x53, 0x0a, 0x0a, 0x42, 0x6c, 0x6f,
	0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x04, 0x32, 0xa8,
	0x01, 0x0a, 0x09, 0x44, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x0c,
	0x44, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x1e, 0x2e, 0x64,
	0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73,
	0x65, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x64,
	0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73,
	0x65, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x2e,
	0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x64, 0x69,
	0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x61, 0x79, 0x72, 0x2d, 0x4c, 0x61, 0x62,
	0x73, 0x2f, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_disperser_disperser_proto_rawDescOnce sync.Once
	file_disperser_disperser_proto_rawDescData = file_disperser_disperser_proto_rawDesc
)

func file_disperser_disperser_proto_rawDescGZIP() []byte {
	file_disperser_disperser_proto_rawDescOnce.Do(func() {
		file_disperser_disperser_proto_rawDescData = protoimpl.X.CompressGZIP(file_disperser_disperser_proto_rawDescData)
	})
	return file_disperser_disperser_proto_rawDescData
}

var file_disperser_disperser_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_disperser_disperser_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_disperser_disperser_proto_goTypes = []interface{}{
	(BlobStatus)(0),               // 0: disperser.BlobStatus
	(*DisperseBlobRequest)(nil),   // 1: disperser.DisperseBlobRequest
	(*DisperseBlobReply)(nil),     // 2: disperser.DisperseBlobReply
	(*BlobStatusRequest)(nil),     // 3: disperser.BlobStatusRequest
	(*BlobStatusReply)(nil),       // 4: disperser.BlobStatusReply
	(*SecurityParams)(nil),        // 5: disperser.SecurityParams
	(*BlobInfo)(nil),              // 6: disperser.BlobInfo
	(*BlobQuorumParam)(nil),       // 7: disperser.BlobQuorumParam
	(*BlobHeader)(nil),            // 8: disperser.BlobHeader
	(*BatchHeader)(nil),           // 9: disperser.BatchHeader
	(*BlobVerificationProof)(nil), // 10: disperser.BlobVerificationProof
	(*BatchMetadata)(nil),         // 11: disperser.BatchMetadata
}
var file_disperser_disperser_proto_depIdxs = []int32{
	5,  // 0: disperser.DisperseBlobRequest.security_params:type_name -> disperser.SecurityParams
	0,  // 1: disperser.DisperseBlobReply.result:type_name -> disperser.BlobStatus
	0,  // 2: disperser.BlobStatusReply.status:type_name -> disperser.BlobStatus
	6,  // 3: disperser.BlobStatusReply.info:type_name -> disperser.BlobInfo
	8,  // 4: disperser.BlobInfo.blob_header:type_name -> disperser.BlobHeader
	10, // 5: disperser.BlobInfo.blob_verification_proof:type_name -> disperser.BlobVerificationProof
	7,  // 6: disperser.BlobHeader.blob_quorum_params:type_name -> disperser.BlobQuorumParam
	11, // 7: disperser.BlobVerificationProof.batch_metadata:type_name -> disperser.BatchMetadata
	9,  // 8: disperser.BatchMetadata.batch_header:type_name -> disperser.BatchHeader
	1,  // 9: disperser.Disperser.DisperseBlob:input_type -> disperser.DisperseBlobRequest
	3,  // 10: disperser.Disperser.GetBlobStatus:input_type -> disperser.BlobStatusRequest
	2,  // 11: disperser.Disperser.DisperseBlob:output_type -> disperser.DisperseBlobReply
	4,  // 12: disperser.Disperser.GetBlobStatus:output_type -> disperser.BlobStatusReply
	11, // [11:13] is the sub-list for method output_type
	9,  // [9:11] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_disperser_disperser_proto_init() }
func file_disperser_disperser_proto_init() {
	if File_disperser_disperser_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_disperser_disperser_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisperseBlobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_disperser_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisperseBlobReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_disperser_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_disperser_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobStatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_disperser_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_disperser_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_disperser_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobQuorumParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_disperser_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_disperser_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_disperser_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobVerificationProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_disperser_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_disperser_disperser_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_disperser_disperser_proto_goTypes,
		DependencyIndexes: file_disperser_disperser_proto_depIdxs,
		EnumInfos:         file_disperser_disperser_proto_enumTypes,
		MessageInfos:      file_disperser_disperser_proto_msgTypes,
	}.Build()
	File_disperser_disperser_proto = out.File
	file_disperser_disperser_proto_rawDesc = nil
	file_disperser_disperser_proto_goTypes = nil
	file_disperser_disperser_proto_depIdxs = nil
}
